import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FlexLayoutModule } from '@angular/flex-layout';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatGoogleMapsAutocompleteDirective } from './directives/mat-google-maps-autocomplete.directive';
import { MatValidateAddressDirective } from './directives/address-validator/mat-address-validator.directive';
import { MatGoogleMapsAutocompleteComponent } from './component/mat-google-maps-autocomplete.component';
// tslint:disable-next-line:max-line-length
import { MatSearchGoogleMapsAutocompleteComponent } from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';
var MatGoogleMapsAutocompleteModule = /** @class */ (function () {
    function MatGoogleMapsAutocompleteModule() {
    }
    MatGoogleMapsAutocompleteModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                FormsModule,
                ReactiveFormsModule,
                FlexLayoutModule,
                MatInputModule,
                MatIconModule
            ],
            exports: [
                MatGoogleMapsAutocompleteComponent,
                MatGoogleMapsAutocompleteDirective,
                MatValidateAddressDirective,
                MatSearchGoogleMapsAutocompleteComponent
            ],
            declarations: [
                MatGoogleMapsAutocompleteComponent,
                MatGoogleMapsAutocompleteDirective,
                MatValidateAddressDirective,
                MatSearchGoogleMapsAutocompleteComponent
            ]
        })
    ], MatGoogleMapsAutocompleteModule);
    return MatGoogleMapsAutocompleteModule;
}());
export { MatGoogleMapsAutocompleteModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1tYXRlcmlhbC1leHRlbnNpb25zL2dvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS8iLCJzb3VyY2VzIjpbImxpYi9tYXQtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDdEQsT0FBTyxFQUFDLFdBQVcsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFDLGtDQUFrQyxFQUFDLE1BQU0scURBQXFELENBQUM7QUFDdkcsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sZ0VBQWdFLENBQUM7QUFDM0csT0FBTyxFQUFDLGtDQUFrQyxFQUFDLE1BQU0sb0RBQW9ELENBQUM7QUFDdEcsMkNBQTJDO0FBQzNDLE9BQU8sRUFBQyx3Q0FBd0MsRUFBQyxNQUFNLCtGQUErRixDQUFDO0FBMEJ2SjtJQUFBO0lBQ0EsQ0FBQztJQURZLCtCQUErQjtRQXZCM0MsUUFBUSxDQUFDO1lBQ1IsT0FBTyxFQUNMO2dCQUNFLFlBQVk7Z0JBQ1osV0FBVztnQkFDWCxtQkFBbUI7Z0JBQ25CLGdCQUFnQjtnQkFDaEIsY0FBYztnQkFDZCxhQUFhO2FBQ2Q7WUFDSCxPQUFPLEVBQUU7Z0JBQ1Asa0NBQWtDO2dCQUNsQyxrQ0FBa0M7Z0JBQ2xDLDJCQUEyQjtnQkFDM0Isd0NBQXdDO2FBQ3pDO1lBQ0QsWUFBWSxFQUFFO2dCQUNaLGtDQUFrQztnQkFDbEMsa0NBQWtDO2dCQUNsQywyQkFBMkI7Z0JBQzNCLHdDQUF3QzthQUN6QztTQUNGLENBQUM7T0FDVywrQkFBK0IsQ0FDM0M7SUFBRCxzQ0FBQztDQUFBLEFBREQsSUFDQztTQURZLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0ZsZXhMYXlvdXRNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0JztcbmltcG9ydCB7Rm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hdEljb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7IE1hdElucHV0TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQnO1xuaW1wb3J0IHtNYXRHb29nbGVNYXBzQXV0b2NvbXBsZXRlRGlyZWN0aXZlfSBmcm9tICcuL2RpcmVjdGl2ZXMvbWF0LWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtNYXRWYWxpZGF0ZUFkZHJlc3NEaXJlY3RpdmV9IGZyb20gJy4vZGlyZWN0aXZlcy9hZGRyZXNzLXZhbGlkYXRvci9tYXQtYWRkcmVzcy12YWxpZGF0b3IuZGlyZWN0aXZlJztcbmltcG9ydCB7TWF0R29vZ2xlTWFwc0F1dG9jb21wbGV0ZUNvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnQvbWF0LWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQnO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuaW1wb3J0IHtNYXRTZWFyY2hHb29nbGVNYXBzQXV0b2NvbXBsZXRlQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudC9tYXQtc2VhcmNoLWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS9tYXQtc2VhcmNoLWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQnO1xuXG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6XG4gICAgW1xuICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgICAgRmxleExheW91dE1vZHVsZSxcbiAgICAgIE1hdElucHV0TW9kdWxlLFxuICAgICAgTWF0SWNvbk1vZHVsZVxuICAgIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBNYXRHb29nbGVNYXBzQXV0b2NvbXBsZXRlQ29tcG9uZW50LFxuICAgIE1hdEdvb2dsZU1hcHNBdXRvY29tcGxldGVEaXJlY3RpdmUsXG4gICAgTWF0VmFsaWRhdGVBZGRyZXNzRGlyZWN0aXZlLFxuICAgIE1hdFNlYXJjaEdvb2dsZU1hcHNBdXRvY29tcGxldGVDb21wb25lbnRcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTWF0R29vZ2xlTWFwc0F1dG9jb21wbGV0ZUNvbXBvbmVudCxcbiAgICBNYXRHb29nbGVNYXBzQXV0b2NvbXBsZXRlRGlyZWN0aXZlLFxuICAgIE1hdFZhbGlkYXRlQWRkcmVzc0RpcmVjdGl2ZSxcbiAgICBNYXRTZWFyY2hHb29nbGVNYXBzQXV0b2NvbXBsZXRlQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTWF0R29vZ2xlTWFwc0F1dG9jb21wbGV0ZU1vZHVsZSB7XG59XG4iXX0=