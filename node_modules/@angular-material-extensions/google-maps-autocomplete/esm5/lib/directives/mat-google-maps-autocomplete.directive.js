import { __decorate, __param } from "tslib";
import { Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { MatValidateAddressDirective } from '../directives/address-validator/mat-address-validator.directive';
import { MapsAPILoader } from '@agm/core';
import { isPlatformBrowser } from '@angular/common';
var MatGoogleMapsAutocompleteDirective = /** @class */ (function () {
    function MatGoogleMapsAutocompleteDirective(platformId, elemRef, mapsAPILoader, ngZone) {
        this.platformId = platformId;
        this.elemRef = elemRef;
        this.mapsAPILoader = mapsAPILoader;
        this.ngZone = ngZone;
        this.autoCompleteOptions = {};
        this.onChange = new EventEmitter();
        this.onAutocompleteSelected = new EventEmitter();
        this.onGermanAddressMapped = new EventEmitter();
        this.onLocationSelected = new EventEmitter();
        this.onNewPlaceResult = new EventEmitter();
        this.addressValidator = new MatValidateAddressDirective();
        this.addressSearchControl = new FormControl({ value: null }, Validators.compose([
            Validators.required,
            this.addressValidator.validate()
        ]));
        this.propagateChange = function (_) {
        };
    }
    MatGoogleMapsAutocompleteDirective_1 = MatGoogleMapsAutocompleteDirective;
    MatGoogleMapsAutocompleteDirective.prototype.ngOnInit = function () {
        if (isPlatformBrowser(this.platformId)) {
            this.addressValidator.subscribe(this.onNewPlaceResult);
            var options = {
                // types: ['address'],
                // componentRestrictions: {country: this.country},
                placeIdOnly: this.placeIdOnly,
                strictBounds: this.strictBounds,
                // types: this.types,
                type: this.type
            };
            // tslint:disable-next-line:no-unused-expression
            this.country ? options.componentRestrictions = { country: this.country } : null;
            // tslint:disable-next-line:no-unused-expression
            this.country ? options.types = this.types : null;
            this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);
            this.initGoogleMapsAutocomplete();
        }
    };
    MatGoogleMapsAutocompleteDirective.prototype.initGoogleMapsAutocomplete = function () {
        var _this = this;
        this.mapsAPILoader
            .load()
            .then(function () {
            var autocomplete = new google.maps.places.Autocomplete(_this.elemRef.nativeElement, _this.autoCompleteOptions);
            autocomplete.addListener('place_changed', function () {
                _this.ngZone.run(function () {
                    // get the place result
                    var place = autocomplete.getPlace();
                    var germanAddress = {
                        gmID: place.id,
                        icon: place.icon,
                        url: place.url,
                        placeID: place.place_id,
                        displayAddress: place.formatted_address,
                        name: place.name,
                        vicinity: place.vicinity,
                        locality: {},
                        state: {},
                        country: {},
                        geoLocation: { latitude: -1, longitude: -1 },
                    };
                    if (place.geometry && place.geometry.location) {
                        germanAddress.geoLocation.latitude = place.geometry.location.lat();
                        germanAddress.geoLocation.longitude = place.geometry.location.lng();
                    }
                    place.address_components.forEach(function (value) {
                        if (value.types.indexOf('street_number') > -1) {
                            germanAddress.streetNumber = value.short_name;
                        }
                        if (value.types.indexOf('route') > -1) {
                            germanAddress.streetName = value.long_name;
                        }
                        if (value.types.indexOf('postal_code') > -1) {
                            germanAddress.postalCode = Number(value.short_name);
                        }
                        if (value.types.indexOf('sublocality') > -1) {
                            germanAddress.sublocality = value.long_name;
                        }
                        if (value.types.indexOf('locality') > -1) {
                            germanAddress.locality.long = value.long_name;
                            germanAddress.locality.short = value.short_name;
                        }
                        if (value.types.indexOf('administrative_area_level_1') > -1) {
                            germanAddress.state.long = value.long_name;
                            germanAddress.state.short = value.short_name;
                        }
                        if (value.types.indexOf('country') > -1) {
                            germanAddress.country.long = value.long_name;
                            germanAddress.country.short = value.short_name;
                        }
                        if (value.types.indexOf('administrative_area_level_3') > -1) {
                            germanAddress.locality.short = value.short_name;
                        }
                    });
                    _this.onGermanAddressMapped.emit(germanAddress);
                    if (!place.place_id || place.geometry === undefined || place.geometry === null) {
                        // place result is not valid
                        return;
                    }
                    else {
                        // show dialog to select a address from the input
                        // emit failed event
                        _this.value = place;
                        _this.propagateChange(_this.value);
                    }
                    _this.address = place.formatted_address;
                    _this.onAutocompleteSelected.emit(place);
                    _this.onLocationSelected.emit({
                        latitude: place.geometry.location.lat(),
                        longitude: place.geometry.location.lng()
                    });
                });
            });
        })
            .catch(function (err) { return console.log(err); });
    };
    MatGoogleMapsAutocompleteDirective.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    MatGoogleMapsAutocompleteDirective.prototype.registerOnTouched = function (fn) {
    };
    MatGoogleMapsAutocompleteDirective.prototype.setDisabledState = function (isDisabled) {
    };
    MatGoogleMapsAutocompleteDirective.prototype.writeValue = function (obj) {
        if (obj) {
            this.value = obj;
        }
    };
    var MatGoogleMapsAutocompleteDirective_1;
    MatGoogleMapsAutocompleteDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ElementRef },
        { type: MapsAPILoader },
        { type: NgZone }
    ]; };
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteDirective.prototype, "address", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteDirective.prototype, "country", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteDirective.prototype, "placeIdOnly", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteDirective.prototype, "strictBounds", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteDirective.prototype, "types", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteDirective.prototype, "type", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteDirective.prototype, "autoCompleteOptions", void 0);
    __decorate([
        Output()
    ], MatGoogleMapsAutocompleteDirective.prototype, "onChange", void 0);
    __decorate([
        Output()
    ], MatGoogleMapsAutocompleteDirective.prototype, "onAutocompleteSelected", void 0);
    __decorate([
        Output()
    ], MatGoogleMapsAutocompleteDirective.prototype, "onGermanAddressMapped", void 0);
    __decorate([
        Output()
    ], MatGoogleMapsAutocompleteDirective.prototype, "onLocationSelected", void 0);
    MatGoogleMapsAutocompleteDirective = MatGoogleMapsAutocompleteDirective_1 = __decorate([
        Directive({
            selector: '[matGoogleMapsAutocomplete]',
            exportAs: 'matGoogleMapsAutocomplete',
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return MatGoogleMapsAutocompleteDirective_1; }),
                    multi: true
                }
            ]
        }),
        __param(0, Inject(PLATFORM_ID))
    ], MatGoogleMapsAutocompleteDirective);
    return MatGoogleMapsAutocompleteDirective;
}());
export { MatGoogleMapsAutocompleteDirective };
//# sourceMappingURL=data:application/json;base64,