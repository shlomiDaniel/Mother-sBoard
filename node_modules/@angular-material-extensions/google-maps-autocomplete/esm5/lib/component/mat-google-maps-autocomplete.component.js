import { __decorate } from "tslib";
import { Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output, ViewChild } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { MapsAPILoader } from '@agm/core';
import { MatValidateAddressDirective } from '../directives/address-validator/mat-address-validator.directive';
export var Appearance;
(function (Appearance) {
    Appearance["STANDARD"] = "standard";
    Appearance["FILL"] = "fill";
    Appearance["OUTLINE"] = "outline";
    Appearance["LEGACY"] = "legacy";
})(Appearance || (Appearance = {}));
var MatGoogleMapsAutocompleteComponent = /** @class */ (function () {
    function MatGoogleMapsAutocompleteComponent(mapsAPILoader, ngZone) {
        this.mapsAPILoader = mapsAPILoader;
        this.ngZone = ngZone;
        this.addressLabelText = 'Address';
        this.placeholderText = 'Please enter the address';
        this.requiredErrorText = 'The address is required';
        this.invalidErrorText = 'The address is not valid';
        this.appearance = Appearance.STANDARD;
        this.autoCompleteOptions = {};
        this.onChange = new EventEmitter();
        this.onAutocompleteSelected = new EventEmitter();
        this.onGermanAddressMapped = new EventEmitter();
        this.onLocationSelected = new EventEmitter();
        this.onNewPlaceResult = new EventEmitter();
        this.addressValidator = new MatValidateAddressDirective();
        this.addressSearchControl = new FormControl({ value: null }, Validators.compose([
            Validators.required,
            this.addressValidator.validate()
        ]));
        this.propagateChange = function (_) {
        };
    }
    MatGoogleMapsAutocompleteComponent_1 = MatGoogleMapsAutocompleteComponent;
    MatGoogleMapsAutocompleteComponent.prototype.ngOnInit = function () {
        this.addressValidator.subscribe(this.onNewPlaceResult);
        var options = {
            // types: ['address'],
            // componentRestrictions: {country: this.country},
            placeIdOnly: this.placeIdOnly,
            strictBounds: this.strictBounds,
            // types: this.types,
            type: this.type
        };
        // tslint:disable-next-line:no-unused-expression
        this.country ? options.componentRestrictions = { country: this.country } : null;
        // tslint:disable-next-line:no-unused-expression
        this.country ? options.types = this.types : null;
        this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);
        this.initGoogleMapsAutocomplete();
    };
    MatGoogleMapsAutocompleteComponent.prototype.initGoogleMapsAutocomplete = function () {
        var _this = this;
        this.mapsAPILoader
            .load()
            .then(function () {
            var autocomplete = new google.maps.places.Autocomplete(_this.searchElementRef.nativeElement, _this.autoCompleteOptions);
            autocomplete.addListener('place_changed', function () {
                _this.ngZone.run(function () {
                    // get the place result
                    var place = autocomplete.getPlace();
                    var germanAddress = {
                        gmID: place.id,
                        icon: place.icon,
                        url: place.url,
                        placeID: place.place_id,
                        displayAddress: place.formatted_address,
                        name: place.name,
                        vicinity: place.vicinity,
                        locality: {},
                        state: {},
                        country: {},
                        geoLocation: { latitude: -1, longitude: -1 },
                    };
                    if (place.geometry && place.geometry.location) {
                        germanAddress.geoLocation.latitude = place.geometry.location.lat();
                        germanAddress.geoLocation.longitude = place.geometry.location.lng();
                    }
                    place.address_components.forEach(function (value) {
                        if (value.types.indexOf('street_number') > -1) {
                            germanAddress.streetNumber = value.short_name;
                        }
                        if (value.types.indexOf('route') > -1) {
                            germanAddress.streetName = value.long_name;
                        }
                        if (value.types.indexOf('postal_code') > -1) {
                            germanAddress.postalCode = Number(value.short_name);
                        }
                        if (value.types.indexOf('sublocality') > -1) {
                            germanAddress.sublocality = value.long_name;
                        }
                        if (value.types.indexOf('locality') > -1) {
                            germanAddress.locality.long = value.long_name;
                            germanAddress.locality.short = value.short_name;
                        }
                        if (value.types.indexOf('administrative_area_level_1') > -1) {
                            germanAddress.state.long = value.long_name;
                            germanAddress.state.short = value.short_name;
                        }
                        if (value.types.indexOf('country') > -1) {
                            germanAddress.country.long = value.long_name;
                            germanAddress.country.short = value.short_name;
                        }
                        if (value.types.indexOf('administrative_area_level_3') > -1) {
                            germanAddress.locality.short = value.short_name;
                        }
                    });
                    _this.onGermanAddressMapped.emit(germanAddress);
                    if (!place.place_id || place.geometry === undefined || place.geometry === null) {
                        // place result is not valid
                        return;
                    }
                    else {
                        // show dialog to select a address from the input
                        // emit failed event
                        _this.value = place;
                        _this.propagateChange(_this.value);
                    }
                    _this.address = place.formatted_address;
                    _this.onAutocompleteSelected.emit(place);
                    // console.log('onAutocompleteSelected -> ', place);
                    _this.onLocationSelected.emit({
                        latitude: place.geometry.location.lat(),
                        longitude: place.geometry.location.lng()
                    });
                });
            });
        })
            .catch(function (err) { return console.log(err); });
    };
    MatGoogleMapsAutocompleteComponent.prototype.onQuery = function (event) {
        // console.log('onChange()', event);
        this.onChange.emit(this.address);
    };
    MatGoogleMapsAutocompleteComponent.prototype.resetAddress = function () {
        this.address = null;
        this.addressSearchControl.updateValueAndValidity();
    };
    MatGoogleMapsAutocompleteComponent.prototype.writeValue = function (obj) {
        if (obj) {
            this.value = obj;
        }
    };
    MatGoogleMapsAutocompleteComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    MatGoogleMapsAutocompleteComponent.prototype.registerOnTouched = function (fn) {
        throw new Error('Method not implemented.');
    };
    MatGoogleMapsAutocompleteComponent.prototype.setDisabledState = function (isDisabled) {
        throw new Error('Method not implemented.');
    };
    var MatGoogleMapsAutocompleteComponent_1;
    MatGoogleMapsAutocompleteComponent.ctorParameters = function () { return [
        { type: MapsAPILoader },
        { type: NgZone }
    ]; };
    __decorate([
        ViewChild('search')
    ], MatGoogleMapsAutocompleteComponent.prototype, "searchElementRef", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "addressLabelText", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "placeholderText", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "requiredErrorText", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "invalidErrorText", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "appearance", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "address", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "country", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "placeIdOnly", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "strictBounds", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "types", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "type", void 0);
    __decorate([
        Input()
    ], MatGoogleMapsAutocompleteComponent.prototype, "autoCompleteOptions", void 0);
    __decorate([
        Output()
    ], MatGoogleMapsAutocompleteComponent.prototype, "onChange", void 0);
    __decorate([
        Output()
    ], MatGoogleMapsAutocompleteComponent.prototype, "onAutocompleteSelected", void 0);
    __decorate([
        Output()
    ], MatGoogleMapsAutocompleteComponent.prototype, "onGermanAddressMapped", void 0);
    __decorate([
        Output()
    ], MatGoogleMapsAutocompleteComponent.prototype, "onLocationSelected", void 0);
    MatGoogleMapsAutocompleteComponent = MatGoogleMapsAutocompleteComponent_1 = __decorate([
        Component({
            selector: 'mat-google-maps-autocomplete',
            exportAs: 'matGoogleMapsAutocomplete',
            template: "<mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n  <mat-label>{{addressLabelText}}</mat-label>\n  <input matInput\n         [(ngModel)]=\"address\"\n         (change)=\"onQuery($event)\"\n         placeholder=\"{{placeholderText}}\"\n         class=\"form-control\"\n         #search\n         MatValidateAddress\n         required>\n  <mat-error *ngIf=\"addressSearchControl.hasError('required')\">\n    {{requiredErrorText}}\n  </mat-error>\n  <mat-error *ngIf=\"addressSearchControl.hasError('validateAddress')\">\n    {{invalidErrorText}}\n  </mat-error>\n</mat-form-field>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return MatGoogleMapsAutocompleteComponent_1; }),
                    multi: true
                }
            ],
            styles: [".full-width{width:100%}"]
        })
    ], MatGoogleMapsAutocompleteComponent);
    return MatGoogleMapsAutocompleteComponent;
}());
export { MatGoogleMapsAutocompleteComponent };
//# sourceMappingURL=data:application/json;base64,