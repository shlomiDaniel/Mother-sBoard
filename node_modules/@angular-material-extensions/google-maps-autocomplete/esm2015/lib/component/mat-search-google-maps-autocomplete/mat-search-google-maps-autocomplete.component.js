import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/flex-layout/flex';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/material/input';
import * as ɵngcc6 from '@angular/material/icon';
import * as ɵngcc7 from '../../directives/mat-google-maps-autocomplete.directive';

const _c0 = function () { return { y: "100%" }; };
const _c1 = function (a1) { return { value: "*", params: a1 }; };
function MatSearchGoogleMapsAutocompleteComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "mat-form-field", 11);
    ɵngcc0.ɵɵelementStart(2, "mat-label");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 15);
    ɵngcc0.ɵɵlistener("onAutocompleteSelected", function MatSearchGoogleMapsAutocompleteComponent_div_1_Template_input_onAutocompleteSelected_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.syncAutoComplete($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-icon", 13);
    ɵngcc0.ɵɵtext(6, "search");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("appearance", ctx_r0.appearance)("@animate", ɵngcc0.ɵɵpureFunction1(9, _c1, ɵngcc0.ɵɵpureFunction0(8, _c0)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.searchAddressLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("country", ctx_r0.country)("placeIdOnly", ctx_r0.placeIdOnly)("strictBounds", ctx_r0.strictBounds)("types", ctx_r0.types)("type", ctx_r0.type);
} }
function MatSearchGoogleMapsAutocompleteComponent_mat_form_field_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 11);
    ɵngcc0.ɵɵelementStart(1, "mat-label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "input", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("appearance", ctx_r1.appearance)("@animate", ɵngcc0.ɵɵpureFunction1(5, _c1, ɵngcc0.ɵɵpureFunction0(4, _c0)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.vicinityLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("readonly", ctx_r1.readonly);
} }
var MatSearchGoogleMapsAutocompleteComponent_1;
import { __decorate } from "tslib";
import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { parseGermanAddress } from '../../helpers/parser';
import { Appearance } from '../mat-google-maps-autocomplete.component';
import { InputAnimations } from '../../animations';
let MatSearchGoogleMapsAutocompleteComponent = MatSearchGoogleMapsAutocompleteComponent_1 = class MatSearchGoogleMapsAutocompleteComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.appearance = Appearance.STANDARD;
        this.searchAddressLabel = 'Search Address';
        this.streetNameLabel = 'Street';
        this.streetNumberLabel = 'Nr.';
        this.postalCodeLabel = 'PLZ';
        this.localityLabel = 'Locality';
        this.vicinityLabel = 'Vicinity';
        this.onGermanAddressMapped = new EventEmitter();
        this.firstInit = true;
        this.propagateChange = (_) => {
        };
    }
    ngOnInit() {
        this.createAddressFormGroup();
    }
    createAddressFormGroup() {
        this.addressFormGroup = this.formBuilder.group({
            streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],
            streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],
            postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],
            vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],
            locality: this.formBuilder.group({
                long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],
            }),
        });
    }
    syncAutoComplete($event) {
        if (this.germanAddress) {
            this.addressFormGroup.reset();
        }
        const germanAddress = parseGermanAddress($event);
        this.germanAddress = germanAddress;
        if (germanAddress.vicinity) {
            this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);
        }
        if (germanAddress.streetName) {
            this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);
        }
        if (germanAddress.streetNumber) {
            this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString());
        }
        if (germanAddress.postalCode) {
            this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);
        }
        if (germanAddress.locality && germanAddress.locality.long) {
            this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);
        }
        this.value = germanAddress;
        this.propagateChange(this.value);
        this.onGermanAddressMapped.emit(germanAddress);
    }
    writeValue(obj) {
        let shouldRecreateFG = false;
        if (obj) {
            if (!this.value && this.firstInit) {
                shouldRecreateFG = true;
            }
            this.value = obj;
            this.propagateChange(this.value);
            if (shouldRecreateFG) {
                this.createAddressFormGroup();
                this.firstInit = false;
            }
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
    }
    setDisabledState(isDisabled) {
    }
};
MatSearchGoogleMapsAutocompleteComponent.ɵfac = function MatSearchGoogleMapsAutocompleteComponent_Factory(t) { return new (t || MatSearchGoogleMapsAutocompleteComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder)); };
MatSearchGoogleMapsAutocompleteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSearchGoogleMapsAutocompleteComponent, selectors: [["mat-search-google-maps-autocomplete"]], inputs: { appearance: "appearance", searchAddressLabel: "searchAddressLabel", streetNameLabel: "streetNameLabel", streetNumberLabel: "streetNumberLabel", postalCodeLabel: "postalCodeLabel", localityLabel: "localityLabel", vicinityLabel: "vicinityLabel", value: "value", showVicinity: "showVicinity", country: "country", placeIdOnly: "placeIdOnly", strictBounds: "strictBounds", types: "types", type: "type", readonly: "readonly", disableSearch: "disableSearch" }, outputs: { onGermanAddressMapped: "onGermanAddressMapped" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent_1),
                multi: true
            }
        ])], decls: 25, vars: 31, consts: [["fxLayout", "column"], ["fxFlex", "100", 4, "ngIf"], ["fxFlex", "", "fxLayoutGap", "10px", 3, "formGroup"], ["fxLayout", "row", "fxLayoutGap", "10px"], ["fxFlex", "80", 3, "appearance"], ["formControlName", "streetName", "matInput", "", "required", "", 3, "readonly"], ["fxFlex", "20", 3, "appearance"], ["formControlName", "streetNumber", "matInput", "", "required", "", 3, "readonly"], ["formControlName", "postalCode", "matInput", "", "required", "", 3, "readonly"], ["fxFlex", "auto", 3, "appearance", 4, "ngIf"], ["formGroupName", "locality", "fxFlex", "auto"], ["fxFlex", "auto", 3, "appearance"], ["formControlName", "long", "matInput", "", "required", "", 3, "readonly"], ["color", "primary", "matSuffix", ""], ["fxFlex", "100"], ["matGoogleMapsAutocomplete", "", "matInput", "", "required", "", 3, "country", "placeIdOnly", "strictBounds", "types", "type", "onAutocompleteSelected"], ["matInput", "", "formControlName", "vicinity", 3, "readonly"]], template: function MatSearchGoogleMapsAutocompleteComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, MatSearchGoogleMapsAutocompleteComponent_div_1_Template, 7, 11, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "form", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "mat-form-field", 4);
        ɵngcc0.ɵɵelementStart(5, "mat-label");
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(7, "input", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-form-field", 6);
        ɵngcc0.ɵɵelementStart(9, "mat-label");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "input", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 3);
        ɵngcc0.ɵɵelementStart(13, "mat-form-field", 6);
        ɵngcc0.ɵɵelementStart(14, "mat-label");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(16, "input", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, MatSearchGoogleMapsAutocompleteComponent_mat_form_field_17_Template, 4, 7, "mat-form-field", 9);
        ɵngcc0.ɵɵelementStart(18, "div", 10);
        ɵngcc0.ɵɵelementStart(19, "mat-form-field", 11);
        ɵngcc0.ɵɵelementStart(20, "mat-label");
        ɵngcc0.ɵɵtext(21);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(22, "input", 12);
        ɵngcc0.ɵɵelementStart(23, "mat-icon", 13);
        ɵngcc0.ɵɵtext(24, "add_location");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disableSearch);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroup", ctx.addressFormGroup);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("appearance", ctx.appearance)("@animate", ɵngcc0.ɵɵpureFunction1(20, _c1, ɵngcc0.ɵɵpureFunction0(19, _c0)));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.streetNameLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("readonly", ctx.readonly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("appearance", ctx.appearance)("@animate", ɵngcc0.ɵɵpureFunction1(23, _c1, ɵngcc0.ɵɵpureFunction0(22, _c0)));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.streetNumberLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("readonly", ctx.readonly);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("appearance", ctx.appearance)("@animate", ɵngcc0.ɵɵpureFunction1(26, _c1, ɵngcc0.ɵɵpureFunction0(25, _c0)));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.postalCodeLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("readonly", ctx.readonly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showVicinity);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("appearance", ctx.appearance)("@animate", ɵngcc0.ɵɵpureFunction1(29, _c1, ɵngcc0.ɵɵpureFunction0(28, _c0)));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.localityLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("readonly", ctx.readonly);
    } }, directives: [ɵngcc2.DefaultLayoutDirective, ɵngcc3.NgIf, ɵngcc1.ɵangular_packages_forms_forms_y, ɵngcc1.NgControlStatusGroup, ɵngcc2.DefaultFlexDirective, ɵngcc2.DefaultLayoutGapDirective, ɵngcc1.FormGroupDirective, ɵngcc4.MatFormField, ɵngcc4.MatLabel, ɵngcc1.DefaultValueAccessor, ɵngcc5.MatInput, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc1.RequiredValidator, ɵngcc1.FormGroupName, ɵngcc6.MatIcon, ɵngcc4.MatSuffix, ɵngcc7.MatGoogleMapsAutocompleteDirective], styles: [""], data: { animation: InputAnimations } });
MatSearchGoogleMapsAutocompleteComponent.ctorParameters = () => [
    { type: FormBuilder }
];
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "appearance", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "searchAddressLabel", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "streetNameLabel", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "streetNumberLabel", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "postalCodeLabel", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "localityLabel", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "vicinityLabel", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "showVicinity", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "country", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "placeIdOnly", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "strictBounds", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "types", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "type", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "readonly", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "disableSearch", void 0);
__decorate([
    Input()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "value", void 0);
__decorate([
    Output()
], MatSearchGoogleMapsAutocompleteComponent.prototype, "onGermanAddressMapped", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSearchGoogleMapsAutocompleteComponent, [{
        type: Component,
        args: [{
                selector: 'mat-search-google-maps-autocomplete',
                template: "<div fxLayout=\"column\">\n  <div *ngIf=\"!disableSearch\" fxFlex=\"100\">\n    <!--search address-->\n    <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n      <mat-label>{{searchAddressLabel}}</mat-label>\n      <input\n        (onAutocompleteSelected)=\"syncAutoComplete($event)\"\n        [country]=\"country\"\n        [placeIdOnly]=\"placeIdOnly\"\n        [strictBounds]=\"strictBounds\"\n        [types]=\"types\"\n        [type]=\"type\"\n        matGoogleMapsAutocomplete\n        matInput\n        required\n      />\n      <mat-icon color=\"primary\" matSuffix>search</mat-icon>\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n    </mat-form-field>\n  </div>\n\n  <form [formGroup]=\"addressFormGroup\" fxFlex fxLayoutGap=\"10px\">\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"80\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNameLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetName\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNumberLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetNumber\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{postalCodeLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"postalCode\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field *ngIf=\"showVicinity\" fxFlex=\"auto\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{vicinityLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          matInput\n          formControlName=\"vicinity\"\n        />\n      </mat-form-field>\n      <div formGroupName=\"locality\" fxFlex=\"auto\">\n        <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n          <mat-label>{{localityLabel}}</mat-label>\n          <input\n            [readonly]=\"readonly\"\n            formControlName=\"long\"\n            matInput\n            required\n          />\n          <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n        </mat-form-field>\n      </div>\n    </div>\n  </form>\n</div>\n",
                animations: InputAnimations,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent_1),
                        multi: true
                    }
                ],
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }]; }, { appearance: [{
            type: Input
        }], searchAddressLabel: [{
            type: Input
        }], streetNameLabel: [{
            type: Input
        }], streetNumberLabel: [{
            type: Input
        }], postalCodeLabel: [{
            type: Input
        }], localityLabel: [{
            type: Input
        }], vicinityLabel: [{
            type: Input
        }], onGermanAddressMapped: [{
            type: Output
        }], value: [{
            type: Input
        }], showVicinity: [{
            type: Input
        }], country: [{
            type: Input
        }], placeIdOnly: [{
            type: Input
        }], strictBounds: [{
            type: Input
        }], types: [{
            type: Input
        }], type: [{
            type: Input
        }], readonly: [{
            type: Input
        }], disableSearch: [{
            type: Input
        }] }); })();
export { MatSearchGoogleMapsAutocompleteComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlYXJjaC1nb29nbGUtbWFwcy1hdXRvY29tcGxldGUuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZzovQGFuZ3VsYXItbWF0ZXJpYWwtZXh0ZW5zaW9ucy9nb29nbGUtbWFwcy1hdXRvY29tcGxldGUvbGliL2NvbXBvbmVudC9tYXQtc2VhcmNoLWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS9tYXQtc2VhcmNoLWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTNHLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRXhELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwyQ0FBMkMsQ0FBQztBQUNyRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFlakQsSUFBYSx3Q0FBd0MsZ0RBQXJELE1BQWEsd0NBQXdDO0FBQUcsSUE4RHRELFlBQW9CLFdBQXdCO0FBQzlDLFFBRHNCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0FBQUMsUUEzRDdDLGVBQVUsR0FBd0IsVUFBVSxDQUFDLFFBQVEsQ0FBQztBQUN4RCxRQUVFLHVCQUFrQixHQUFHLGdCQUFnQixDQUFDO0FBQ3hDLFFBRUUsb0JBQWUsR0FBRyxRQUFRLENBQUM7QUFDN0IsUUFFRSxzQkFBaUIsR0FBRyxLQUFLLENBQUM7QUFDNUIsUUFFRSxvQkFBZSxHQUFHLEtBQUssQ0FBQztBQUMxQixRQUVFLGtCQUFh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QURaLEtBQUssRUFBRTtBQUNWLHNFQUFnQjtBQUdkO0FBQWEsSUFEWixLQUFLLEVBQUU7QUFDViwwRUFBb0I7QUFHbEI7QUFBYSxJQURaLEtBQUssRUFBRTtBQUNWLCtFQUF5QjtBQUd2QjtBQUFhLElBRFosS0FBSyxFQUFFO0FBQ1YsdUVBQXVCO0FBR3JCO0FBQWEsSUFEWixNQUFNLEVBQUU7QUFDWCx1RkFBeUY7QUFwRDVFLHdDQUF3QztNQWJwRCxTQUFTLENBQUM7Q0FDVCxRQUFRLEVBQUU7K0JBQXFDLFVBQy9DO3loSEFBbUUsVUFFbkUsVUFBVSxFQUFFLGVBQWU7S0FDM0IsU0FBUyxFQUFFLGNBQ1Q7R0FDRSxPQUFPLEVBQUU7QUFBaUIsa0JBQzFCO09BQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQXdDLENBQUMsa0JBQ3ZFLEtBQUssRUFBRSxJQUFJLGNBQ1osVUFDRiw0QkFDRjtBQUFDLElBQ1c7UUFBd0MsQ0FxSXBEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFDRDtBQUFDLFNBdElZLHdDQUF3QztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAsIE5HX1ZBTFVFX0FDQ0VTU09SLCBWYWxpZGF0b3JzfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7cGFyc2VHZXJtYW5BZGRyZXNzfSBmcm9tICcuLi8uLi9oZWxwZXJzL3BhcnNlcic7XG5pbXBvcnQge0dlcm1hbkFkZHJlc3N9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtBcHBlYXJhbmNlfSBmcm9tICcuLi9tYXQtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlLmNvbXBvbmVudCc7XG5pbXBvcnQge0lucHV0QW5pbWF0aW9uc30gZnJvbSAnLi4vLi4vYW5pbWF0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21hdC1zZWFyY2gtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21hdC1zZWFyY2gtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbWF0LXNlYXJjaC1nb29nbGUtbWFwcy1hdXRvY29tcGxldGUuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogSW5wdXRBbmltYXRpb25zLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1hdFNlYXJjaEdvb2dsZU1hcHNBdXRvY29tcGxldGVDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTWF0U2VhcmNoR29vZ2xlTWFwc0F1dG9jb21wbGV0ZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuXG4gIEBJbnB1dCgpXG4gIGFwcGVhcmFuY2U6IHN0cmluZyB8IEFwcGVhcmFuY2UgPSBBcHBlYXJhbmNlLlNUQU5EQVJEO1xuXG4gIEBJbnB1dCgpXG4gIHNlYXJjaEFkZHJlc3NMYWJlbCA9ICdTZWFyY2ggQWRkcmVzcyc7XG5cbiAgQElucHV0KClcbiAgc3RyZWV0TmFtZUxhYmVsID0gJ1N0cmVldCc7XG5cbiAgQElucHV0KClcbiAgc3RyZWV0TnVtYmVyTGFiZWwgPSAnTnIuJztcblxuICBASW5wdXQoKVxuICBwb3N0YWxDb2RlTGFiZWwgPSAnUExaJztcblxuICBASW5wdXQoKVxuICBsb2NhbGl0eUxhYmVsID0gJ0xvY2FsaXR5JztcblxuICBASW5wdXQoKVxuICB2aWNpbml0eUxhYmVsID0gJ1ZpY2luaXR5JztcblxuICBASW5wdXQoKVxuICBzaG93VmljaW5pdHk6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgY291bnRyeTogc3RyaW5nIHwgc3RyaW5nW107XG5cbiAgQElucHV0KClcbiAgcGxhY2VJZE9ubHk/OiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIHN0cmljdEJvdW5kcz86IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgdHlwZXM/OiBzdHJpbmdbXTtcbiAgLy8gdHlwZXM6IHN0cmluZ1tdID0gWydhZGRyZXNzJ107XG5cbiAgQElucHV0KClcbiAgdHlwZT86IHN0cmluZztcblxuICBASW5wdXQoKVxuICByZWFkb25seTogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBkaXNhYmxlU2VhcmNoOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIHZhbHVlOiBHZXJtYW5BZGRyZXNzO1xuXG4gIEBPdXRwdXQoKVxuICBvbkdlcm1hbkFkZHJlc3NNYXBwZWQ6IEV2ZW50RW1pdHRlcjxHZXJtYW5BZGRyZXNzPiA9IG5ldyBFdmVudEVtaXR0ZXI8R2VybWFuQWRkcmVzcz4oKTtcblxuICBnZXJtYW5BZGRyZXNzOiBHZXJtYW5BZGRyZXNzO1xuICBhZGRyZXNzRm9ybUdyb3VwOiBGb3JtR3JvdXA7XG5cbiAgZmlyc3RJbml0ID0gdHJ1ZTtcblxuICBwcm9wYWdhdGVDaGFuZ2UgPSAoXzogYW55KSA9PiB7XG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlQWRkcmVzc0Zvcm1Hcm91cCgpO1xuICB9XG5cbiAgY3JlYXRlQWRkcmVzc0Zvcm1Hcm91cCgpOiB2b2lkIHtcbiAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXAgPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgIHN0cmVldE5hbWU6IFt0aGlzLnZhbHVlICYmIHRoaXMudmFsdWUuc3RyZWV0TmFtZSA/IHRoaXMudmFsdWUuc3RyZWV0TmFtZSA6IG51bGwsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgc3RyZWV0TnVtYmVyOiBbdGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlLnN0cmVldE51bWJlciA/IHRoaXMudmFsdWUuc3RyZWV0TnVtYmVyIDogbnVsbCwgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICBwb3N0YWxDb2RlOiBbdGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlLnBvc3RhbENvZGUgPyB0aGlzLnZhbHVlLnBvc3RhbENvZGUgOiBudWxsLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgIHZpY2luaXR5OiBbdGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlLnZpY2luaXR5ID8gdGhpcy52YWx1ZS52aWNpbml0eSA6IG51bGxdLFxuICAgICAgbG9jYWxpdHk6IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgICBsb25nOiBbdGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlLmxvY2FsaXR5ICYmIHRoaXMudmFsdWUubG9jYWxpdHkubG9uZyA/IHRoaXMudmFsdWUubG9jYWxpdHkubG9uZyA6IG51bGwsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICBzeW5jQXV0b0NvbXBsZXRlKCRldmVudDogZ29vZ2xlLm1hcHMucGxhY2VzLlBsYWNlUmVzdWx0KSB7XG4gICAgaWYgKHRoaXMuZ2VybWFuQWRkcmVzcykge1xuICAgICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwLnJlc2V0KCk7XG4gICAgfVxuICAgIGNvbnN0IGdlcm1hbkFkZHJlc3M6IEdlcm1hbkFkZHJlc3MgPSBwYXJzZUdlcm1hbkFkZHJlc3MoJGV2ZW50KTtcbiAgICB0aGlzLmdlcm1hbkFkZHJlc3MgPSBnZXJtYW5BZGRyZXNzO1xuICAgIGlmIChnZXJtYW5BZGRyZXNzLnZpY2luaXR5KSB7XG4gICAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXAuZ2V0KCd2aWNpbml0eScpLnBhdGNoVmFsdWUoZ2VybWFuQWRkcmVzcy52aWNpbml0eSk7XG4gICAgfVxuICAgIGlmIChnZXJtYW5BZGRyZXNzLnN0cmVldE5hbWUpIHtcbiAgICAgIHRoaXMuYWRkcmVzc0Zvcm1Hcm91cC5nZXQoJ3N0cmVldE5hbWUnKS5wYXRjaFZhbHVlKGdlcm1hbkFkZHJlc3Muc3RyZWV0TmFtZSk7XG4gICAgfVxuICAgIGlmIChnZXJtYW5BZGRyZXNzLnN0cmVldE51bWJlcikge1xuICAgICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwLmdldCgnc3RyZWV0TnVtYmVyJykucGF0Y2hWYWx1ZShnZXJtYW5BZGRyZXNzLnN0cmVldE51bWJlci50b1N0cmluZygpKTtcbiAgICB9XG4gICAgaWYgKGdlcm1hbkFkZHJlc3MucG9zdGFsQ29kZSkge1xuICAgICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwLmdldCgncG9zdGFsQ29kZScpLnBhdGNoVmFsdWUoZ2VybWFuQWRkcmVzcy5wb3N0YWxDb2RlKTtcbiAgICB9XG4gICAgaWYgKGdlcm1hbkFkZHJlc3MubG9jYWxpdHkgJiYgZ2VybWFuQWRkcmVzcy5sb2NhbGl0eS5sb25nKSB7XG4gICAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXAuZ2V0KCdsb2NhbGl0eS5sb25nJykucGF0Y2hWYWx1ZShnZXJtYW5BZGRyZXNzLmxvY2FsaXR5LmxvbmcpO1xuICAgIH1cblxuICAgIHRoaXMudmFsdWUgPSBnZXJtYW5BZGRyZXNzO1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHRoaXMudmFsdWUpO1xuICAgIHRoaXMub25HZXJtYW5BZGRyZXNzTWFwcGVkLmVtaXQoZ2VybWFuQWRkcmVzcyk7XG4gIH1cblxuICB3cml0ZVZhbHVlKG9iajogYW55KTogdm9pZCB7XG4gICAgbGV0IHNob3VsZFJlY3JlYXRlRkcgPSBmYWxzZTtcbiAgICBpZiAob2JqKSB7XG4gICAgICBpZiAoIXRoaXMudmFsdWUgJiYgdGhpcy5maXJzdEluaXQpIHtcbiAgICAgICAgc2hvdWxkUmVjcmVhdGVGRyA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLnZhbHVlID0gb2JqO1xuICAgICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgICBpZiAoc2hvdWxkUmVjcmVhdGVGRykge1xuICAgICAgICB0aGlzLmNyZWF0ZUFkZHJlc3NGb3JtR3JvdXAoKTtcbiAgICAgICAgdGhpcy5maXJzdEluaXQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gIH1cblxufVxuIl19