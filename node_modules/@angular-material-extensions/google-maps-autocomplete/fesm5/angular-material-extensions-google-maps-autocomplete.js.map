{"version":3,"file":"angular-material-extensions-google-maps-autocomplete.js","sources":["ng:/@angular-material-extensions/google-maps-autocomplete/lib/directives/address-validator/mat-address-validator.directive.ts","ng:/@angular-material-extensions/google-maps-autocomplete/lib/component/mat-google-maps-autocomplete.component.ts","ng:/@angular-material-extensions/google-maps-autocomplete/lib/helpers/parser.ts","ng:/@angular-material-extensions/google-maps-autocomplete/lib/animations/index.ts","ng:/@angular-material-extensions/google-maps-autocomplete/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","ng:/@angular-material-extensions/google-maps-autocomplete/lib/directives/mat-google-maps-autocomplete.directive.ts","ng:/@angular-material-extensions/google-maps-autocomplete/lib/mat-google-maps-autocomplete.module.ts","ng:/@angular-material-extensions/google-maps-autocomplete/public-api.ts","ng:/@angular-material-extensions/google-maps-autocomplete/angular-material-extensions-google-maps-autocomplete.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, EventEmitter, forwardRef} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\nimport PlaceResult = google.maps.places.PlaceResult;\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\n\n@Directive({\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\n  ]\n})\nexport class MatValidateAddressDirective implements Validator {\n\n  public subscription: any;\n\n  private _address: PlaceResult;\n\n\n  constructor() {\n  }\n\n  public validate(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | any => {\n      return this.address ? null : {\n        validateAddress: {\n          valid: false\n        }\n      };\n    }\n  }\n\n  public subscribe(eventEmitter: EventEmitter<any>) {\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\n      this.address = address;\n    });\n  }\n\n  public unsubscribe() {\n    this.subscription.unsubscribe();\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  set address(value) {\n    this._address = value;\n  }\n}\n","import {Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {Location} from '../interfaces/location.interface';\nimport {GermanAddress} from '../interfaces';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\nexport enum Appearance {\n  STANDARD = 'standard',\n  FILL = 'fill',\n  OUTLINE = 'outline',\n  LEGACY = 'legacy',\n}\n\n@Component({\n  selector: 'mat-google-maps-autocomplete',\n  exportAs: 'matGoogleMapsAutocomplete',\n  templateUrl: './mat-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  @ViewChild('search')\n  public searchElementRef: ElementRef;\n\n  @Input()\n  addressLabelText = 'Address';\n\n  @Input()\n  placeholderText = 'Please enter the address';\n\n  @Input()\n  requiredErrorText = 'The address is required';\n\n  @Input()\n  invalidErrorText = 'The address is not valid';\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  value: PlaceResult;\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(private mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.addressValidator.subscribe(this.onNewPlaceResult);\n\n    const options: AutocompleteOptions = {\n      // types: ['address'],\n      // componentRestrictions: {country: this.country},\n      placeIdOnly: this.placeIdOnly,\n      strictBounds: this.strictBounds,\n      // types: this.types,\n      type: this.type\n    };\n\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.componentRestrictions = {country: this.country} : null;\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.types = this.types : null;\n\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n    this.initGoogleMapsAutocomplete();\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n              this.value = place;\n              this.propagateChange(this.value)\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            // console.log('onAutocompleteSelected -> ', place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  public onQuery(event: any) {\n    // console.log('onChange()', event);\n    this.onChange.emit(this.address);\n  }\n\n  private resetAddress() {\n    this.address = null;\n    this.addressSearchControl.updateValueAndValidity();\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.value = obj;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    throw new Error('Method not implemented.');\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    throw new Error('Method not implemented.');\n  }\n\n}\n","import PlaceResult = google.maps.places.PlaceResult;\nimport {GermanAddress} from '../interfaces';\n\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\n  const germanAddress: GermanAddress = {\n    gmID: placeResult.id,\n    icon: placeResult.icon,\n    url: placeResult.url,\n    placeID: placeResult.place_id,\n    displayAddress: placeResult.formatted_address,\n    name: placeResult.name,\n    vicinity: placeResult.vicinity,\n    locality: {},\n    state: {},\n    country: {},\n    geoLocation: {latitude: -1, longitude: -1},\n  };\n\n  if (placeResult.geometry && placeResult.geometry.location) {\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n  }\n\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\n    placeResult.address_components.forEach(value => {\n      if (value.types.indexOf('street_number') > -1) {\n        germanAddress.streetNumber = value.short_name;\n      }\n      if (value.types.indexOf('route') > -1) {\n        germanAddress.streetName = value.long_name;\n      }\n      if (value.types.indexOf('postal_code') > -1) {\n        germanAddress.postalCode = Number(value.short_name);\n      }\n      if (value.types.indexOf('sublocality') > -1) {\n        germanAddress.sublocality = value.long_name;\n      }\n      if (value.types.indexOf('locality') > -1) {\n        germanAddress.locality.long = value.long_name;\n        germanAddress.locality.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\n        germanAddress.state.long = value.long_name;\n        germanAddress.state.short = value.short_name;\n      }\n      if (value.types.indexOf('country') > -1) {\n        germanAddress.country.long = value.long_name;\n        germanAddress.country.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\n        germanAddress.locality.short = value.short_name;\n      }\n    });\n  }\n  return germanAddress;\n}\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\n\nconst customAnimation = animation(\n  [\n    style({\n      opacity: '{{opacity}}',\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n  ],\n  {\n    params: {\n      duration: '200ms',\n      delay: '0ms',\n      opacity: '0',\n      scale: '1',\n      x: '0',\n      y: '0',\n      z: '0'\n    }\n  }\n);\n\nexport const InputAnimations = [\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n\n  trigger('animateStagger', [\n    state('50', style('*')),\n    state('100', style('*')),\n    state('200', style('*')),\n\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\n  ]),\n];\n","import {Component, EventEmitter, forwardRef, Input, OnInit, Output} from '@angular/core';\nimport {ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\n\nimport {parseGermanAddress} from '../../helpers/parser';\nimport {GermanAddress} from '../../interfaces';\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\nimport {InputAnimations} from '../../animations';\n\n@Component({\n  selector: 'mat-search-google-maps-autocomplete',\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\n  animations: InputAnimations,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  searchAddressLabel = 'Search Address';\n\n  @Input()\n  streetNameLabel = 'Street';\n\n  @Input()\n  streetNumberLabel = 'Nr.';\n\n  @Input()\n  postalCodeLabel = 'PLZ';\n\n  @Input()\n  localityLabel = 'Locality';\n\n  @Input()\n  vicinityLabel = 'Vicinity';\n\n  @Input()\n  showVicinity: boolean;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  disableSearch: boolean;\n\n  @Input()\n  value: GermanAddress;\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  germanAddress: GermanAddress;\n  addressFormGroup: FormGroup;\n\n  firstInit = true;\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(private formBuilder: FormBuilder) {\n  }\n\n  ngOnInit() {\n    this.createAddressFormGroup();\n  }\n\n  createAddressFormGroup(): void {\n    this.addressFormGroup = this.formBuilder.group({\n      streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\n      streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\n      postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\n      vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\n      locality: this.formBuilder.group({\n        long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\n      }),\n    });\n  }\n\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\n    if (this.germanAddress) {\n      this.addressFormGroup.reset();\n    }\n    const germanAddress: GermanAddress = parseGermanAddress($event);\n    this.germanAddress = germanAddress;\n    if (germanAddress.vicinity) {\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);\n    }\n    if (germanAddress.streetName) {\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);\n    }\n    if (germanAddress.streetNumber) {\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString());\n    }\n    if (germanAddress.postalCode) {\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);\n    }\n    if (germanAddress.locality && germanAddress.locality.long) {\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);\n    }\n\n    this.value = germanAddress;\n    this.propagateChange(this.value);\n    this.onGermanAddressMapped.emit(germanAddress);\n  }\n\n  writeValue(obj: any): void {\n    let shouldRecreateFG = false;\n    if (obj) {\n      if (!this.value && this.firstInit) {\n        shouldRecreateFG = true;\n      }\n      this.value = obj;\n      this.propagateChange(this.value);\n      if (shouldRecreateFG) {\n        this.createAddressFormGroup();\n        this.firstInit = false;\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n\n}\n","import {Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {MapsAPILoader} from '@agm/core';\nimport {Location} from '../interfaces/location.interface';\nimport {isPlatformBrowser} from '@angular/common';\nimport {GermanAddress} from '../interfaces/germand.address.interface';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\n@Directive({\n  selector: '[matGoogleMapsAutocomplete]',\n  exportAs: 'matGoogleMapsAutocomplete',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteDirective implements OnInit, ControlValueAccessor {\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  value: PlaceResult;\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\n              public elemRef: ElementRef,\n              public mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.addressValidator.subscribe(this.onNewPlaceResult);\n      const options: AutocompleteOptions = {\n        // types: ['address'],\n        // componentRestrictions: {country: this.country},\n        placeIdOnly: this.placeIdOnly,\n        strictBounds: this.strictBounds,\n        // types: this.types,\n        type: this.type\n      };\n\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.componentRestrictions = {country: this.country} : null;\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.types = this.types : null;\n\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n      this.initGoogleMapsAutocomplete();\n    }\n\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n              this.value = place;\n              this.propagateChange(this.value)\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.value = obj;\n    }\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\n// tslint:disable-next-line:max-line-length\nimport {MatSearchGoogleMapsAutocompleteComponent} from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';\n\n\n@NgModule({\n  imports:\n    [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      FlexLayoutModule,\n      MatInputModule,\n      MatIconModule\n    ],\n  exports: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  declarations: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ]\n})\nexport class MatGoogleMapsAutocompleteModule {\n}\n","/*\n * Public API Surface of google-maps-autocomplete\n */\n\nexport * from './lib/interfaces';\nexport * from './lib/component';\nexport * from './lib/directives/mat-google-maps-autocomplete.directive';\nexport * from './lib/directives/address-validator/mat-address-validator.directive';\nexport * from './lib/mat-google-maps-autocomplete.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {InputAnimations as ɵc} from './lib/animations';\nexport {MatGoogleMapsAutocompleteComponent as ɵa} from './lib/component/mat-google-maps-autocomplete.component';\nexport {MatSearchGoogleMapsAutocompleteComponent as ɵb} from './lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';"]}