import { Component, Input, ViewChild } from '@angular/core';
import { MatColumnDef, MatCellDef, MatHeaderCellDef, MatTable, MatTableDataSource } from '@angular/material/table';
export class MatSelectionColumnComponent {
    constructor(table) {
        this.table = table;
    }
    ngOnInit() {
        this.columnDef.name = this.name || 'select';
        this.columnDef.cell = this.cell;
        this.columnDef.headerCell = this.headerCell;
        this.table.addColumnDef(this.columnDef);
    }
    ngOnDestroy() {
        this.table.removeColumnDef(this.columnDef);
    }
    get data() {
        if (!this.table) {
            return [];
        }
        if (this.table.dataSource instanceof MatTableDataSource) {
            return this.table.dataSource.data || [];
        }
        // TODO: What about Observables?
        return this.table.dataSource || [];
    }
    /** Whether the number of selected elements matches the total number of rows. */
    isAllSelected() {
        var _a;
        const numSelected = ((_a = this.selection) === null || _a === void 0 ? void 0 : _a.selected.length) || 0;
        const numRows = this.data.length;
        return numSelected === numRows;
    }
    /** Selects all rows if they are not all selected; otherwise clear selection. */
    masterToggle() {
        if (!this.selection) {
            return;
        }
        this.isAllSelected() ?
            this.selection.clear() :
            this.selection.select(...this.data);
    }
}
MatSelectionColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-selection-column',
                template: "<ng-container matColumnDef>\n  <th mat-header-cell *matHeaderCellDef>\n    <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                  [checked]=\"selection?.hasValue() && isAllSelected()\"\n                  [indeterminate]=\"selection?.hasValue() && !isAllSelected()\">\n    </mat-checkbox>\n  </th>\n  <td mat-cell *matCellDef=\"let row\">\n    <mat-checkbox (click)=\"$event.stopPropagation()\"\n                  (change)=\"$event ? selection?.toggle(row) : null\"\n                  [checked]=\"selection?.isSelected(row)\">\n    </mat-checkbox>\n  </td>\n</ng-container>\n",
                styles: [".mat-cell,.mat-header-cell{padding-left:24px;padding-right:24px}"]
            },] }
];
MatSelectionColumnComponent.ctorParameters = () => [
    { type: MatTable }
];
MatSelectionColumnComponent.propDecorators = {
    name: [{ type: Input }],
    selection: [{ type: Input }],
    columnDef: [{ type: ViewChild, args: [MatColumnDef, { static: true },] }],
    cell: [{ type: ViewChild, args: [MatCellDef, { static: true },] }],
    headerCell: [{ type: ViewChild, args: [MatHeaderCellDef, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9leHRlbnNpb25zL3NyYy90YWJsZS9zZWxlY3Rpb24tY29sdW1uL3NlbGVjdGlvbi1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUdMLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQ0wsWUFBWSxFQUNaLFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIsUUFBUSxFQUNSLGtCQUFrQixFQUNuQixNQUFNLHlCQUF5QixDQUFDO0FBT2pDLE1BQU0sT0FBTywyQkFBMkI7SUFZdEMsWUFBb0IsS0FBa0I7UUFBbEIsVUFBSyxHQUFMLEtBQUssQ0FBYTtJQUFJLENBQUM7SUFFcEMsUUFBUTtRQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDO1FBQzVDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVNLFdBQVc7UUFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFZLElBQUk7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFDZjtZQUNFLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxZQUFZLGtCQUFrQixFQUN2RDtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztTQUN6QztRQUNELGdDQUFnQztRQUVoQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBaUIsSUFBSSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUdELGdGQUFnRjtJQUNoRixhQUFhOztRQUNYLE1BQU0sV0FBVyxHQUFHLE9BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsUUFBUSxDQUFDLE1BQU0sS0FBSSxDQUFDLENBQUM7UUFDekQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDakMsT0FBTyxXQUFXLEtBQUssT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxnRkFBZ0Y7SUFDaEYsWUFBWTtRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUNuQjtZQUNFLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7WUE3REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBSyxzQkFBc0I7Z0JBQ25DLGdtQkFBZ0Q7O2FBRWpEOzs7WUFSQyxRQUFROzs7bUJBWVAsS0FBSzt3QkFHTCxLQUFLO3dCQUVMLFNBQVMsU0FBQyxZQUFZLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDO21CQUN0QyxTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQzt5QkFDcEMsU0FBUyxTQUFDLGdCQUFnQixFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25Nb2RlbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBNYXRDb2x1bW5EZWYsXG4gIE1hdENlbGxEZWYsXG4gIE1hdEhlYWRlckNlbGxEZWYsXG4gIE1hdFRhYmxlLFxuICBNYXRUYWJsZURhdGFTb3VyY2Vcbn0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdGFibGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICAgICdtYXQtc2VsZWN0aW9uLWNvbHVtbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9zZWxlY3Rpb24tY29sdW1uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiAgIFsnLi9zZWxlY3Rpb24tY29sdW1uLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTWF0U2VsZWN0aW9uQ29sdW1uQ29tcG9uZW50PFQ+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIC8qKiBAZGVzY3JpcHRpb24gTmFtZSBvZiB0aGUgY29sdW1uICovXG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcblxuICAvKiogQGRlc2NyaXB0aW9uIFJlZmVyZW5jZSB0byB0aGUgc2VsZWN0aW9uIG1vZGVsICovXG4gIEBJbnB1dCgpIHNlbGVjdGlvbjogU2VsZWN0aW9uTW9kZWw8VD47XG5cbiAgQFZpZXdDaGlsZChNYXRDb2x1bW5EZWYsIHtzdGF0aWM6IHRydWV9KSBjb2x1bW5EZWY6IE1hdENvbHVtbkRlZjtcbiAgQFZpZXdDaGlsZChNYXRDZWxsRGVmLCB7c3RhdGljOiB0cnVlfSkgY2VsbDogTWF0Q2VsbERlZjtcbiAgQFZpZXdDaGlsZChNYXRIZWFkZXJDZWxsRGVmLCB7c3RhdGljOiB0cnVlfSkgaGVhZGVyQ2VsbDogTWF0SGVhZGVyQ2VsbERlZjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhYmxlOiBNYXRUYWJsZTxUPikgeyB9XG5cbiAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY29sdW1uRGVmLm5hbWUgPSB0aGlzLm5hbWUgfHwgJ3NlbGVjdCc7XG4gICAgdGhpcy5jb2x1bW5EZWYuY2VsbCA9IHRoaXMuY2VsbDtcbiAgICB0aGlzLmNvbHVtbkRlZi5oZWFkZXJDZWxsID0gdGhpcy5oZWFkZXJDZWxsO1xuICAgIHRoaXMudGFibGUuYWRkQ29sdW1uRGVmKHRoaXMuY29sdW1uRGVmKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnRhYmxlLnJlbW92ZUNvbHVtbkRlZih0aGlzLmNvbHVtbkRlZik7XG4gIH1cblxuICBwcml2YXRlIGdldCBkYXRhKCk6IFRbXSB7XG4gICAgaWYgKCF0aGlzLnRhYmxlKVxuICAgIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKHRoaXMudGFibGUuZGF0YVNvdXJjZSBpbnN0YW5jZW9mIE1hdFRhYmxlRGF0YVNvdXJjZSlcbiAgICB7XG4gICAgICByZXR1cm4gdGhpcy50YWJsZS5kYXRhU291cmNlLmRhdGEgfHwgW107XG4gICAgfVxuICAgIC8vIFRPRE86IFdoYXQgYWJvdXQgT2JzZXJ2YWJsZXM/XG5cbiAgICByZXR1cm4gdGhpcy50YWJsZS5kYXRhU291cmNlIGFzIFRbXSB8fCBbXTtcbiAgfVxuXG5cbiAgLyoqIFdoZXRoZXIgdGhlIG51bWJlciBvZiBzZWxlY3RlZCBlbGVtZW50cyBtYXRjaGVzIHRoZSB0b3RhbCBudW1iZXIgb2Ygcm93cy4gKi9cbiAgaXNBbGxTZWxlY3RlZCgpIHtcbiAgICBjb25zdCBudW1TZWxlY3RlZCA9IHRoaXMuc2VsZWN0aW9uPy5zZWxlY3RlZC5sZW5ndGggfHwgMDtcbiAgICBjb25zdCBudW1Sb3dzID0gdGhpcy5kYXRhLmxlbmd0aDtcbiAgICByZXR1cm4gbnVtU2VsZWN0ZWQgPT09IG51bVJvd3M7XG4gIH1cblxuICAvKiogU2VsZWN0cyBhbGwgcm93cyBpZiB0aGV5IGFyZSBub3QgYWxsIHNlbGVjdGVkOyBvdGhlcndpc2UgY2xlYXIgc2VsZWN0aW9uLiAqL1xuICBtYXN0ZXJUb2dnbGUoKSB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbilcbiAgICB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNBbGxTZWxlY3RlZCgpID9cbiAgICAgIHRoaXMuc2VsZWN0aW9uLmNsZWFyKCkgOlxuICAgICAgdGhpcy5zZWxlY3Rpb24uc2VsZWN0KC4uLnRoaXMuZGF0YSk7XG4gIH1cblxufVxuIl19