import { Directive, ElementRef } from '@angular/core';
import { DragDrop, moveItemInArray } from '@angular/cdk/drag-drop';
import { MatTable } from '@angular/material/table';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/table';
import * as ɵngcc2 from '@angular/cdk/drag-drop';
export class CustomHeaderDirective {
    constructor(table, headerRow, dndService) {
        this.table = table;
        this.headerRow = headerRow;
        this.dndService = dndService;
        this.columns = [];
    }
    ngAfterViewInit() {
        this.dropListRef = this.createDropList(this.headerRow, this.createDrags(this.getHeaderCells(this.headerRow.nativeElement)));
        this.columns = this.table._contentHeaderRowDefs.first.columns;
        console.log(this.columns);
    }
    drop(event) {
        moveItemInArray(this.columns, event.previousIndex, event.currentIndex);
    }
    getHeaderCells(rowElem) {
        return Array.from(rowElem.children);
    }
    createDrags(cellRefs) {
        return cellRefs.map((cellRef) => {
            const drag = this.dndService.createDrag(cellRef);
            drag.lockAxis = 'x';
            return drag;
        });
    }
    createDropList(headerRowDef, drags) {
        const dropListRef = this.dndService.createDropList(headerRowDef);
        dropListRef.withItems(drags);
        dropListRef.withOrientation('horizontal');
        dropListRef.dropped.subscribe((event) => this.drop(event));
        return dropListRef;
    }
}
CustomHeaderDirective.ɵfac = function CustomHeaderDirective_Factory(t) { return new (t || CustomHeaderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatTable), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DragDrop)); };
CustomHeaderDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CustomHeaderDirective, selectors: [["", "matCustomHeader", ""]] });
CustomHeaderDirective.ctorParameters = () => [
    { type: MatTable },
    { type: ElementRef },
    { type: DragDrop }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomHeaderDirective, [{
        type: Directive,
        args: [{
                selector: '[matCustomHeader]'
            }]
    }], function () { return [{ type: ɵngcc1.MatTable }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.DragDrop }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWhlYWRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2V4dGVuc2lvbnMvc3JjL3RhYmxlL2RpcmVjdGl2ZXMvY3VzdG9tLWhlYWRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLFFBQVEsRUFHUixlQUFlLEVBQ2hCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUVMLFFBQVEsRUFDVCxNQUFNLHlCQUF5QixDQUFDOzs7O0FBS2pDLE1BQU0sT0FBTyxxQkFBcUI7QUFBRyxJQU1uQyxZQUFvQixLQUFvQixFQUFVLFNBQXFCLEVBQVUsVUFBb0I7QUFDckcsUUFEb0IsVUFBSyxHQUFMLEtBQUssQ0FBZTtBQUFDLFFBQVMsY0FBUyxHQUFULFNBQVMsQ0FBWTtBQUFDLFFBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBVTtBQUFDLFFBRjlGLFlBQU8sR0FBa0IsRUFBRSxDQUFDO0FBQ3RDLElBRUcsQ0FBQztBQUNKLElBQ1MsZUFBZTtBQUFLLFFBRXpCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoSSxRQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsT0FBd0IsQ0FBQztBQUNuRixRQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlCLElBQUUsQ0FBQztBQUNILElBQ1MsSUFBSSxDQUFDLEtBQVU7QUFBSSxRQUV4QixlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMzRSxJQUFFLENBQUM7QUFDSCxJQUNVLGNBQWMsQ0FBQyxPQUFnQjtBQUFJLFFBRXpDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEMsSUFBRSxDQUFDO0FBQ0gsSUFDVSxXQUFXLENBQUMsUUFBOEI7QUFBSSxRQUVwRCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFzQixFQUFFLEVBQUU7QUFDakQsWUFDSSxNQUFNLElBQUksR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFxQixDQUFDLENBQUM7QUFDOUUsWUFBTSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUMxQixZQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNVLGNBQWMsQ0FBQyxZQUF3QixFQUFFLEtBQXFCO0FBQUksUUFFeEUsTUFBTSxXQUFXLEdBQWdCLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2xGLFFBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxRQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUMsUUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBTzlCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM1QixRQUFJLE9BQU8sV0FBVyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNIO2lEQXREQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLG1CQUFtQixjQUM5QjtpSUFDSTtBQUFDO0FBQStDLFlBTm5ELFFBQVE7QUFDUCxZQVhELFVBQVU7QUFDVCxZQUVELFFBQVE7QUFDVDs7Ozs7OztBQVBBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXJEQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTEEsQUFBQSxBQVZBLEFBQUEsQUFHQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgRHJhZ0Ryb3AsXG4gIERyYWdSZWYsXG4gIERyb3BMaXN0UmVmLFxuICBtb3ZlSXRlbUluQXJyYXlcbn0gZnJvbSAnQGFuZ3VsYXIvY2RrL2RyYWctZHJvcCc7XG5pbXBvcnQge1xuICBNYXRIZWFkZXJDZWxsLFxuICBNYXRUYWJsZVxufSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90YWJsZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttYXRDdXN0b21IZWFkZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBDdXN0b21IZWFkZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0XG57XG5cbiAgcHJpdmF0ZSBkcm9wTGlzdFJlZjogRHJvcExpc3RSZWY7XG4gIHByaXZhdGUgY29sdW1uczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFibGU6IE1hdFRhYmxlPGFueT4sIHByaXZhdGUgaGVhZGVyUm93OiBFbGVtZW50UmVmLCBwcml2YXRlIGRuZFNlcnZpY2U6IERyYWdEcm9wKVxuICB7fVxuXG4gIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZFxuICB7XG4gICAgdGhpcy5kcm9wTGlzdFJlZiA9IHRoaXMuY3JlYXRlRHJvcExpc3QodGhpcy5oZWFkZXJSb3csIHRoaXMuY3JlYXRlRHJhZ3ModGhpcy5nZXRIZWFkZXJDZWxscyh0aGlzLmhlYWRlclJvdy5uYXRpdmVFbGVtZW50KSkpO1xuICAgIHRoaXMuY29sdW1ucyA9IHRoaXMudGFibGUuX2NvbnRlbnRIZWFkZXJSb3dEZWZzLmZpcnN0LmNvbHVtbnMgYXMgQXJyYXk8c3RyaW5nPjtcbiAgICBjb25zb2xlLmxvZyh0aGlzLmNvbHVtbnMpO1xuICB9XG5cbiAgcHVibGljIGRyb3AoZXZlbnQ6IGFueSk6IHZvaWRcbiAge1xuICAgIG1vdmVJdGVtSW5BcnJheSh0aGlzLmNvbHVtbnMsIGV2ZW50LnByZXZpb3VzSW5kZXgsIGV2ZW50LmN1cnJlbnRJbmRleCk7XG4gIH1cblxuICBwcml2YXRlIGdldEhlYWRlckNlbGxzKHJvd0VsZW06IEVsZW1lbnQpOiBBcnJheTxNYXRIZWFkZXJDZWxsPlxuICB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocm93RWxlbS5jaGlsZHJlbik7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZURyYWdzKGNlbGxSZWZzOiBBcnJheTxNYXRIZWFkZXJDZWxsPik6IEFycmF5PERyYWdSZWY+XG4gIHtcbiAgICByZXR1cm4gY2VsbFJlZnMubWFwKChjZWxsUmVmOiBNYXRIZWFkZXJDZWxsKSA9PlxuICAgIHtcbiAgICAgIGNvbnN0IGRyYWc6IERyYWdSZWYgPSB0aGlzLmRuZFNlcnZpY2UuY3JlYXRlRHJhZyhjZWxsUmVmIGFzIEVsZW1lbnRSZWYpO1xuICAgICAgZHJhZy5sb2NrQXhpcyA9ICd4JztcbiAgICAgIHJldHVybiBkcmFnO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVEcm9wTGlzdChoZWFkZXJSb3dEZWY6IEVsZW1lbnRSZWYsIGRyYWdzOiBBcnJheTxEcmFnUmVmPik6IERyb3BMaXN0UmVmXG4gIHtcbiAgICBjb25zdCBkcm9wTGlzdFJlZjogRHJvcExpc3RSZWYgPSB0aGlzLmRuZFNlcnZpY2UuY3JlYXRlRHJvcExpc3QoaGVhZGVyUm93RGVmKTtcbiAgICBkcm9wTGlzdFJlZi53aXRoSXRlbXMoZHJhZ3MpO1xuICAgIGRyb3BMaXN0UmVmLndpdGhPcmllbnRhdGlvbignaG9yaXpvbnRhbCcpO1xuICAgIGRyb3BMaXN0UmVmLmRyb3BwZWQuc3Vic2NyaWJlKChldmVudDoge1xuICAgICAgaXRlbTogRHJhZ1JlZjtcbiAgICAgIGN1cnJlbnRJbmRleDogbnVtYmVyO1xuICAgICAgcHJldmlvdXNJbmRleDogbnVtYmVyO1xuICAgICAgY29udGFpbmVyOiBEcm9wTGlzdFJlZjxhbnk+O1xuICAgICAgcHJldmlvdXNDb250YWluZXI6IERyb3BMaXN0UmVmPGFueT47XG4gICAgICBpc1BvaW50ZXJPdmVyQ29udGFpbmVyOiBib29sZWFuO1xuICAgIH0pID0+IHRoaXMuZHJvcChldmVudCkpO1xuICAgIHJldHVybiBkcm9wTGlzdFJlZjtcbiAgfVxuXG59XG4iXX0=