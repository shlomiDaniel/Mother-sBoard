import { Directive, ElementRef } from '@angular/core';
import { DragDrop, moveItemInArray } from '@angular/cdk/drag-drop';
import { MatTable } from '@angular/material/table';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/table';
import * as ɵngcc2 from '@angular/cdk/drag-drop';
export class CustomHeaderDirective {
    constructor(table, headerRow, dndService) {
        this.table = table;
        this.headerRow = headerRow;
        this.dndService = dndService;
        this.columns = [];
    }
    ngAfterViewInit() {
        this.dropListRef = this.createDropList(this.headerRow, this.createDrags(this.getHeaderCells(this.headerRow.nativeElement)));
        this.columns = this.table._contentHeaderRowDefs.first.columns;
        console.log(this.columns);
    }
    drop(event) {
        moveItemInArray(this.columns, event.previousIndex, event.currentIndex);
    }
    getHeaderCells(rowElem) {
        return Array.from(rowElem.children);
    }
    createDrags(cellRefs) {
        return cellRefs.map((cellRef) => {
            const drag = this.dndService.createDrag(cellRef);
            drag.lockAxis = 'x';
            return drag;
        });
    }
    createDropList(headerRowDef, drags) {
        const dropListRef = this.dndService.createDropList(headerRowDef);
        dropListRef.withItems(drags);
        dropListRef.withOrientation('horizontal');
        dropListRef.dropped.subscribe((event) => this.drop(event));
        return dropListRef;
    }
}
CustomHeaderDirective.ɵfac = function CustomHeaderDirective_Factory(t) { return new (t || CustomHeaderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatTable), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DragDrop)); };
CustomHeaderDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CustomHeaderDirective, selectors: [["", "matCustomHeader", ""]] });
CustomHeaderDirective.ctorParameters = () => [
    { type: MatTable },
    { type: ElementRef },
    { type: DragDrop }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomHeaderDirective, [{
        type: Directive,
        args: [{
                selector: '[matCustomHeader]'
            }]
    }], function () { return [{ type: ɵngcc1.MatTable }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.DragDrop }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWhlYWRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2V4dGVuc2lvbnMvc3JjL3RhYmxlL2RpcmVjdGl2ZXMvY3VzdG9tLWhlYWRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLFFBQVEsRUFHUixlQUFlLEVBQ2hCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUVMLFFBQVEsRUFDVCxNQUFNLHlCQUF5QixDQUFDOzs7O0FBS2pDLE1BQU0sT0FBTyxxQkFBcUI7QUFBRyxJQU1uQyxZQUFvQixLQUFvQixFQUFVLFNBQXFCLEVBQVUsVUFBb0I7QUFDckcsUUFEb0IsVUFBSyxHQUFMLEtBQUssQ0FBZTtBQUFDLFFBQVMsY0FBUyxHQUFULFNBQVMsQ0FBWTtBQUFDLFFBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBVTtBQUFDLFFBRjlGLFlBQU8sR0FBa0IsRUFBRSxDQUFDO0FBQ3RDLElBRUcsQ0FBQztBQUNKLElBQ1MsZUFBZTtBQUFLLFFBRXpCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoSSxRQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsT0FBd0IsQ0FBQztBQUNuRixRQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlCLElBQUUsQ0FBQztBQUNILElBQ1MsSUFBSSxDQUFDLEtBQVU7QUFBSSxRQUV4QixlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMzRSxJQUFFLENBQUM7QUFDSCxJQUNVLGNBQWMsQ0FBQyxPQUFnQjtBQUFJLFFBRXpDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEMsSUFBRSxDQUFDO0FBQ0gsSUFDVSxXQUFXLENBQUMsUUFBOEI7QUFBSSxRQUVwRCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFzQixFQUFFLEVBQUU7QUFDakQsWUFDSSxNQUFNLElBQUksR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFxQixDQUFDLENBQUM7QUFDOUUsWUFBTSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUMxQixZQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNVLGNBQWMsQ0FBQyxZQUF3QixFQUFFLEtBQXFCO0FBQUksUUFFeEUsTUFBTSxXQUFXLEdBQWdCLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2xGLFFBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxRQUFJLFdBQVcsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUMsUUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBTzlCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM1QixRQUFJLE9BQU8sV0FBVyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNIO2lEQXREQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLG1CQUFtQixjQUM5QjtpSUFDSTtBQUFDO0FBQStDLFlBTm5ELFFBQVE7QUFDUCxZQVhELFVBQVU7QUFDVCxZQUVELFFBQVE7QUFDVDs7Ozs7O2lJQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBEcmFnRHJvcCxcbiAgRHJhZ1JlZixcbiAgRHJvcExpc3RSZWYsXG4gIG1vdmVJdGVtSW5BcnJheVxufSBmcm9tICdAYW5ndWxhci9jZGsvZHJhZy1kcm9wJztcbmltcG9ydCB7XG4gIE1hdEhlYWRlckNlbGwsXG4gIE1hdFRhYmxlXG59IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3RhYmxlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21hdEN1c3RvbUhlYWRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIEN1c3RvbUhlYWRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXRcbntcblxuICBwcml2YXRlIGRyb3BMaXN0UmVmOiBEcm9wTGlzdFJlZjtcbiAgcHJpdmF0ZSBjb2x1bW5zOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YWJsZTogTWF0VGFibGU8YW55PiwgcHJpdmF0ZSBoZWFkZXJSb3c6IEVsZW1lbnRSZWYsIHByaXZhdGUgZG5kU2VydmljZTogRHJhZ0Ryb3ApXG4gIHt9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkXG4gIHtcbiAgICB0aGlzLmRyb3BMaXN0UmVmID0gdGhpcy5jcmVhdGVEcm9wTGlzdCh0aGlzLmhlYWRlclJvdywgdGhpcy5jcmVhdGVEcmFncyh0aGlzLmdldEhlYWRlckNlbGxzKHRoaXMuaGVhZGVyUm93Lm5hdGl2ZUVsZW1lbnQpKSk7XG4gICAgdGhpcy5jb2x1bW5zID0gdGhpcy50YWJsZS5fY29udGVudEhlYWRlclJvd0RlZnMuZmlyc3QuY29sdW1ucyBhcyBBcnJheTxzdHJpbmc+O1xuICAgIGNvbnNvbGUubG9nKHRoaXMuY29sdW1ucyk7XG4gIH1cblxuICBwdWJsaWMgZHJvcChldmVudDogYW55KTogdm9pZFxuICB7XG4gICAgbW92ZUl0ZW1JbkFycmF5KHRoaXMuY29sdW1ucywgZXZlbnQucHJldmlvdXNJbmRleCwgZXZlbnQuY3VycmVudEluZGV4KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SGVhZGVyQ2VsbHMocm93RWxlbTogRWxlbWVudCk6IEFycmF5PE1hdEhlYWRlckNlbGw+XG4gIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShyb3dFbGVtLmNoaWxkcmVuKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlRHJhZ3MoY2VsbFJlZnM6IEFycmF5PE1hdEhlYWRlckNlbGw+KTogQXJyYXk8RHJhZ1JlZj5cbiAge1xuICAgIHJldHVybiBjZWxsUmVmcy5tYXAoKGNlbGxSZWY6IE1hdEhlYWRlckNlbGwpID0+XG4gICAge1xuICAgICAgY29uc3QgZHJhZzogRHJhZ1JlZiA9IHRoaXMuZG5kU2VydmljZS5jcmVhdGVEcmFnKGNlbGxSZWYgYXMgRWxlbWVudFJlZik7XG4gICAgICBkcmFnLmxvY2tBeGlzID0gJ3gnO1xuICAgICAgcmV0dXJuIGRyYWc7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZURyb3BMaXN0KGhlYWRlclJvd0RlZjogRWxlbWVudFJlZiwgZHJhZ3M6IEFycmF5PERyYWdSZWY+KTogRHJvcExpc3RSZWZcbiAge1xuICAgIGNvbnN0IGRyb3BMaXN0UmVmOiBEcm9wTGlzdFJlZiA9IHRoaXMuZG5kU2VydmljZS5jcmVhdGVEcm9wTGlzdChoZWFkZXJSb3dEZWYpO1xuICAgIGRyb3BMaXN0UmVmLndpdGhJdGVtcyhkcmFncyk7XG4gICAgZHJvcExpc3RSZWYud2l0aE9yaWVudGF0aW9uKCdob3Jpem9udGFsJyk7XG4gICAgZHJvcExpc3RSZWYuZHJvcHBlZC5zdWJzY3JpYmUoKGV2ZW50OiB7XG4gICAgICBpdGVtOiBEcmFnUmVmO1xuICAgICAgY3VycmVudEluZGV4OiBudW1iZXI7XG4gICAgICBwcmV2aW91c0luZGV4OiBudW1iZXI7XG4gICAgICBjb250YWluZXI6IERyb3BMaXN0UmVmPGFueT47XG4gICAgICBwcmV2aW91c0NvbnRhaW5lcjogRHJvcExpc3RSZWY8YW55PjtcbiAgICAgIGlzUG9pbnRlck92ZXJDb250YWluZXI6IGJvb2xlYW47XG4gICAgfSkgPT4gdGhpcy5kcm9wKGV2ZW50KSk7XG4gICAgcmV0dXJuIGRyb3BMaXN0UmVmO1xuICB9XG5cbn1cbiJdfQ==