import { Directive, ElementRef } from '@angular/core';
import { DragDrop, moveItemInArray } from '@angular/cdk/drag-drop';
import { MatTable } from '@angular/material/table';
export class CustomHeaderDirective {
    constructor(table, headerRow, dndService) {
        this.table = table;
        this.headerRow = headerRow;
        this.dndService = dndService;
        this.columns = [];
    }
    ngAfterViewInit() {
        this.dropListRef = this.createDropList(this.headerRow, this.createDrags(this.getHeaderCells(this.headerRow.nativeElement)));
        this.columns = this.table._contentHeaderRowDefs.first.columns;
        console.log(this.columns);
    }
    drop(event) {
        moveItemInArray(this.columns, event.previousIndex, event.currentIndex);
    }
    getHeaderCells(rowElem) {
        return Array.from(rowElem.children);
    }
    createDrags(cellRefs) {
        return cellRefs.map((cellRef) => {
            const drag = this.dndService.createDrag(cellRef);
            drag.lockAxis = 'x';
            return drag;
        });
    }
    createDropList(headerRowDef, drags) {
        const dropListRef = this.dndService.createDropList(headerRowDef);
        dropListRef.withItems(drags);
        dropListRef.withOrientation('horizontal');
        dropListRef.dropped.subscribe((event) => this.drop(event));
        return dropListRef;
    }
}
CustomHeaderDirective.decorators = [
    { type: Directive, args: [{
                selector: '[matCustomHeader]'
            },] }
];
CustomHeaderDirective.ctorParameters = () => [
    { type: MatTable },
    { type: ElementRef },
    { type: DragDrop }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWhlYWRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9leHRlbnNpb25zL3NyYy90YWJsZS9kaXJlY3RpdmVzL2N1c3RvbS1oZWFkZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsVUFBVSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxRQUFRLEVBR1IsZUFBZSxFQUNoQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFFTCxRQUFRLEVBQ1QsTUFBTSx5QkFBeUIsQ0FBQztBQUtqQyxNQUFNLE9BQU8scUJBQXFCO0lBTWhDLFlBQW9CLEtBQW9CLEVBQVUsU0FBcUIsRUFBVSxVQUFvQjtRQUFqRixVQUFLLEdBQUwsS0FBSyxDQUFlO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBWTtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVU7UUFGN0YsWUFBTyxHQUFrQixFQUFFLENBQUM7SUFHbkMsQ0FBQztJQUVLLGVBQWU7UUFFcEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVILElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsT0FBd0IsQ0FBQztRQUMvRSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQVU7UUFFcEIsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVPLGNBQWMsQ0FBQyxPQUFnQjtRQUVyQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTyxXQUFXLENBQUMsUUFBOEI7UUFFaEQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBc0IsRUFBRSxFQUFFO1lBRTdDLE1BQU0sSUFBSSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQXFCLENBQUMsQ0FBQztZQUN4RSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztZQUNwQixPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGNBQWMsQ0FBQyxZQUF3QixFQUFFLEtBQXFCO1FBRXBFLE1BQU0sV0FBVyxHQUFnQixJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5RSxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLFdBQVcsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQU85QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDeEIsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQzs7O1lBckRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2FBQzlCOzs7WUFMQyxRQUFRO1lBVlIsVUFBVTtZQUdWLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBEcmFnRHJvcCxcbiAgRHJhZ1JlZixcbiAgRHJvcExpc3RSZWYsXG4gIG1vdmVJdGVtSW5BcnJheVxufSBmcm9tICdAYW5ndWxhci9jZGsvZHJhZy1kcm9wJztcbmltcG9ydCB7XG4gIE1hdEhlYWRlckNlbGwsXG4gIE1hdFRhYmxlXG59IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3RhYmxlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21hdEN1c3RvbUhlYWRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIEN1c3RvbUhlYWRlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXRcbntcblxuICBwcml2YXRlIGRyb3BMaXN0UmVmOiBEcm9wTGlzdFJlZjtcbiAgcHJpdmF0ZSBjb2x1bW5zOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0YWJsZTogTWF0VGFibGU8YW55PiwgcHJpdmF0ZSBoZWFkZXJSb3c6IEVsZW1lbnRSZWYsIHByaXZhdGUgZG5kU2VydmljZTogRHJhZ0Ryb3ApXG4gIHt9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkXG4gIHtcbiAgICB0aGlzLmRyb3BMaXN0UmVmID0gdGhpcy5jcmVhdGVEcm9wTGlzdCh0aGlzLmhlYWRlclJvdywgdGhpcy5jcmVhdGVEcmFncyh0aGlzLmdldEhlYWRlckNlbGxzKHRoaXMuaGVhZGVyUm93Lm5hdGl2ZUVsZW1lbnQpKSk7XG4gICAgdGhpcy5jb2x1bW5zID0gdGhpcy50YWJsZS5fY29udGVudEhlYWRlclJvd0RlZnMuZmlyc3QuY29sdW1ucyBhcyBBcnJheTxzdHJpbmc+O1xuICAgIGNvbnNvbGUubG9nKHRoaXMuY29sdW1ucyk7XG4gIH1cblxuICBwdWJsaWMgZHJvcChldmVudDogYW55KTogdm9pZFxuICB7XG4gICAgbW92ZUl0ZW1JbkFycmF5KHRoaXMuY29sdW1ucywgZXZlbnQucHJldmlvdXNJbmRleCwgZXZlbnQuY3VycmVudEluZGV4KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SGVhZGVyQ2VsbHMocm93RWxlbTogRWxlbWVudCk6IEFycmF5PE1hdEhlYWRlckNlbGw+XG4gIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShyb3dFbGVtLmNoaWxkcmVuKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlRHJhZ3MoY2VsbFJlZnM6IEFycmF5PE1hdEhlYWRlckNlbGw+KTogQXJyYXk8RHJhZ1JlZj5cbiAge1xuICAgIHJldHVybiBjZWxsUmVmcy5tYXAoKGNlbGxSZWY6IE1hdEhlYWRlckNlbGwpID0+XG4gICAge1xuICAgICAgY29uc3QgZHJhZzogRHJhZ1JlZiA9IHRoaXMuZG5kU2VydmljZS5jcmVhdGVEcmFnKGNlbGxSZWYgYXMgRWxlbWVudFJlZik7XG4gICAgICBkcmFnLmxvY2tBeGlzID0gJ3gnO1xuICAgICAgcmV0dXJuIGRyYWc7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZURyb3BMaXN0KGhlYWRlclJvd0RlZjogRWxlbWVudFJlZiwgZHJhZ3M6IEFycmF5PERyYWdSZWY+KTogRHJvcExpc3RSZWZcbiAge1xuICAgIGNvbnN0IGRyb3BMaXN0UmVmOiBEcm9wTGlzdFJlZiA9IHRoaXMuZG5kU2VydmljZS5jcmVhdGVEcm9wTGlzdChoZWFkZXJSb3dEZWYpO1xuICAgIGRyb3BMaXN0UmVmLndpdGhJdGVtcyhkcmFncyk7XG4gICAgZHJvcExpc3RSZWYud2l0aE9yaWVudGF0aW9uKCdob3Jpem9udGFsJyk7XG4gICAgZHJvcExpc3RSZWYuZHJvcHBlZC5zdWJzY3JpYmUoKGV2ZW50OiB7XG4gICAgICBpdGVtOiBEcmFnUmVmO1xuICAgICAgY3VycmVudEluZGV4OiBudW1iZXI7XG4gICAgICBwcmV2aW91c0luZGV4OiBudW1iZXI7XG4gICAgICBjb250YWluZXI6IERyb3BMaXN0UmVmPGFueT47XG4gICAgICBwcmV2aW91c0NvbnRhaW5lcjogRHJvcExpc3RSZWY8YW55PjtcbiAgICAgIGlzUG9pbnRlck92ZXJDb250YWluZXI6IGJvb2xlYW47XG4gICAgfSkgPT4gdGhpcy5kcm9wKGV2ZW50KSk7XG4gICAgcmV0dXJuIGRyb3BMaXN0UmVmO1xuICB9XG5cbn1cbiJdfQ==