import { Directive, ElementRef, Component, Input, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatTable, MatTableDataSource, MatColumnDef, MatCellDef, MatHeaderCellDef, MatTableModule } from '@angular/material/table';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { moveItemInArray, DragDrop } from '@angular/cdk/drag-drop';

class CustomHeaderDirective {
    constructor(table, headerRow, dndService) {
        this.table = table;
        this.headerRow = headerRow;
        this.dndService = dndService;
        this.columns = [];
    }
    ngAfterViewInit() {
        this.dropListRef = this.createDropList(this.headerRow, this.createDrags(this.getHeaderCells(this.headerRow.nativeElement)));
        this.columns = this.table._contentHeaderRowDefs.first.columns;
        console.log(this.columns);
    }
    drop(event) {
        moveItemInArray(this.columns, event.previousIndex, event.currentIndex);
    }
    getHeaderCells(rowElem) {
        return Array.from(rowElem.children);
    }
    createDrags(cellRefs) {
        return cellRefs.map((cellRef) => {
            const drag = this.dndService.createDrag(cellRef);
            drag.lockAxis = 'x';
            return drag;
        });
    }
    createDropList(headerRowDef, drags) {
        const dropListRef = this.dndService.createDropList(headerRowDef);
        dropListRef.withItems(drags);
        dropListRef.withOrientation('horizontal');
        dropListRef.dropped.subscribe((event) => this.drop(event));
        return dropListRef;
    }
}
CustomHeaderDirective.decorators = [
    { type: Directive, args: [{
                selector: '[matCustomHeader]'
            },] }
];
CustomHeaderDirective.ctorParameters = () => [
    { type: MatTable },
    { type: ElementRef },
    { type: DragDrop }
];

class MatSelectionColumnComponent {
    constructor(table) {
        this.table = table;
    }
    ngOnInit() {
        this.columnDef.name = this.name || 'select';
        this.columnDef.cell = this.cell;
        this.columnDef.headerCell = this.headerCell;
        this.table.addColumnDef(this.columnDef);
    }
    ngOnDestroy() {
        this.table.removeColumnDef(this.columnDef);
    }
    get data() {
        if (!this.table) {
            return [];
        }
        if (this.table.dataSource instanceof MatTableDataSource) {
            return this.table.dataSource.data || [];
        }
        // TODO: What about Observables?
        return this.table.dataSource || [];
    }
    /** Whether the number of selected elements matches the total number of rows. */
    isAllSelected() {
        var _a;
        const numSelected = ((_a = this.selection) === null || _a === void 0 ? void 0 : _a.selected.length) || 0;
        const numRows = this.data.length;
        return numSelected === numRows;
    }
    /** Selects all rows if they are not all selected; otherwise clear selection. */
    masterToggle() {
        if (!this.selection) {
            return;
        }
        this.isAllSelected() ?
            this.selection.clear() :
            this.selection.select(...this.data);
    }
}
MatSelectionColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-selection-column',
                template: "<ng-container matColumnDef>\n  <th mat-header-cell *matHeaderCellDef>\n    <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                  [checked]=\"selection?.hasValue() && isAllSelected()\"\n                  [indeterminate]=\"selection?.hasValue() && !isAllSelected()\">\n    </mat-checkbox>\n  </th>\n  <td mat-cell *matCellDef=\"let row\">\n    <mat-checkbox (click)=\"$event.stopPropagation()\"\n                  (change)=\"$event ? selection?.toggle(row) : null\"\n                  [checked]=\"selection?.isSelected(row)\">\n    </mat-checkbox>\n  </td>\n</ng-container>\n",
                styles: [".mat-cell,.mat-header-cell{padding-left:24px;padding-right:24px}"]
            },] }
];
MatSelectionColumnComponent.ctorParameters = () => [
    { type: MatTable }
];
MatSelectionColumnComponent.propDecorators = {
    name: [{ type: Input }],
    selection: [{ type: Input }],
    columnDef: [{ type: ViewChild, args: [MatColumnDef, { static: true },] }],
    cell: [{ type: ViewChild, args: [MatCellDef, { static: true },] }],
    headerCell: [{ type: ViewChild, args: [MatHeaderCellDef, { static: true },] }]
};

/** @description Exports all the extensions for material's table component. */
class MatTableExtensionsModule {
}
MatTableExtensionsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CustomHeaderDirective,
                    MatSelectionColumnComponent
                ],
                imports: [
                    CommonModule,
                    MatTableModule,
                    MatCheckboxModule
                ],
                exports: [
                    CustomHeaderDirective,
                    MatSelectionColumnComponent
                ]
            },] }
];

// module

/*
 * Public API Surface of extensions
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CustomHeaderDirective, MatSelectionColumnComponent, MatTableExtensionsModule };
//# sourceMappingURL=angular-material-extensions.js.map
