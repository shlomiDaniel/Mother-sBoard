/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Optional } from '@angular/core';
import { ScreenTrackingService, UserTrackingService } from './analytics.service';
import { AngularFireAnalytics } from './analytics';
import * as ɵngcc0 from '@angular/core';
export class AngularFireAnalyticsModule {
    /**
     * @param {?} analytics
     * @param {?} screenTracking
     * @param {?} userTracking
     */
    constructor(analytics, screenTracking, userTracking) {
        // calling anything on analytics will eagerly load the SDK
        // tslint:disable-next-line:no-unused-expression
        analytics.app;
    }
}
AngularFireAnalyticsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFireAnalyticsModule });
AngularFireAnalyticsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFireAnalyticsModule_Factory(t) { return new (t || AngularFireAnalyticsModule)(ɵngcc0.ɵɵinject(AngularFireAnalytics), ɵngcc0.ɵɵinject(ScreenTrackingService, 8), ɵngcc0.ɵɵinject(UserTrackingService, 8)); }, providers: [AngularFireAnalytics] });
/** @nocollapse */
AngularFireAnalyticsModule.ctorParameters = () => [
    { type: AngularFireAnalytics },
    { type: ScreenTrackingService, decorators: [{ type: Optional }] },
    { type: UserTrackingService, decorators: [{ type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFireAnalyticsModule, [{
        type: NgModule,
        args: [{
                providers: [AngularFireAnalytics]
            }]
    }], function () { return [{ type: AngularFireAnalytics }, { type: ScreenTrackingService, decorators: [{
                type: Optional
            }] }, { type: UserTrackingService, decorators: [{
                type: Optional
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbHl0aWNzLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FuYWx5dGljcy9hbmFseXRpY3MubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7O0FBS25ELE1BQU0sT0FBTywwQkFBMEI7QUFDdkM7QUFBUTtBQUNhO0FBQ0o7QUFBK0I7QUFDL0MsSUFIQyxZQUNFLFNBQStCLEVBQ25CLGNBQXFDLEVBQ3JDLFlBQWlDO0FBQzlDLFFBQ0MsMERBQTBEO0FBQzlELFFBQUksZ0RBQWdEO0FBQ3BELFFBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDSDtzREFiQyxRQUFRLFNBQUMsa0JBQ1I7Q0FBUyxFQUFFLENBQUUsb0JBQW9CLENBQUUsY0FDcEMsZ1NBQ0k7QUFBQztBQUFtQjtBQUVMLFlBUFgsb0JBQW9CO0FBQUksWUFEeEIscUJBQXFCLHVCQVN6QixRQUFRO0FBQU8sWUFUWSxtQkFBbUIsdUJBVTlDLFFBQVE7QUFBTTs7Ozs7Ozs7Ozs7QUFYQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBWkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFKQSxBQUFBLEFBREEsQUFBQSxBQVNBLEFBQUEsQUFUQSxBQUFBLEFBVUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2NyZWVuVHJhY2tpbmdTZXJ2aWNlLCBVc2VyVHJhY2tpbmdTZXJ2aWNlIH0gZnJvbSAnLi9hbmFseXRpY3Muc2VydmljZSc7XG5pbXBvcnQgeyBBbmd1bGFyRmlyZUFuYWx5dGljcyB9IGZyb20gJy4vYW5hbHl0aWNzJztcblxuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbIEFuZ3VsYXJGaXJlQW5hbHl0aWNzIF1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckZpcmVBbmFseXRpY3NNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBhbmFseXRpY3M6IEFuZ3VsYXJGaXJlQW5hbHl0aWNzLFxuICAgIEBPcHRpb25hbCgpIHNjcmVlblRyYWNraW5nOiBTY3JlZW5UcmFja2luZ1NlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgdXNlclRyYWNraW5nOiBVc2VyVHJhY2tpbmdTZXJ2aWNlXG4gICkge1xuICAgIC8vIGNhbGxpbmcgYW55dGhpbmcgb24gYW5hbHl0aWNzIHdpbGwgZWFnZXJseSBsb2FkIHRoZSBTREtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cbiAgICBhbmFseXRpY3MuYXBwO1xuICB9XG59XG4iXX0=