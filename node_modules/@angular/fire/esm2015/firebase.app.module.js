/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, InjectionToken, NgModule, NgZone, Optional, PLATFORM_ID, VERSION as NG_VERSION, Version } from '@angular/core';
import * as firebase from 'firebase/app';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function FirebaseOptions() { }
/**
 * @record
 */
export function FirebaseAppConfig() { }
/** @type {?} */
export const FIREBASE_OPTIONS = new InjectionToken('angularfire2.app.options');
/** @type {?} */
export const FIREBASE_APP_NAME = new InjectionToken('angularfire2.app.nameOrConfig');
// Have to implement as we need to return a class from the provider, we should consider exporting
// this in the firebase/app types as this is our highest risk of breaks
export class FirebaseApp {
}
if (false) {
    /** @type {?} */
    FirebaseApp.prototype.name;
    /** @type {?} */
    FirebaseApp.prototype.options;
    /** @type {?} */
    FirebaseApp.prototype.analytics;
    /** @type {?} */
    FirebaseApp.prototype.auth;
    /** @type {?} */
    FirebaseApp.prototype.database;
    /** @type {?} */
    FirebaseApp.prototype.messaging;
    /** @type {?} */
    FirebaseApp.prototype.performance;
    /** @type {?} */
    FirebaseApp.prototype.storage;
    /** @type {?} */
    FirebaseApp.prototype.delete;
    /** @type {?} */
    FirebaseApp.prototype.firestore;
    /** @type {?} */
    FirebaseApp.prototype.functions;
    /** @type {?} */
    FirebaseApp.prototype.remoteConfig;
}
/** @type {?} */
export const VERSION = new Version('6.0.2');
/**
 * @param {?} options
 * @param {?} zone
 * @param {?=} nameOrConfig
 * @return {?}
 */
export function ɵfirebaseAppFactory(options, zone, nameOrConfig) {
    /** @type {?} */
    const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';
    /** @type {?} */
    const config = typeof nameOrConfig === 'object' && nameOrConfig || {};
    config.name = config.name || name;
    // Added any due to some inconsistency between @firebase/app and firebase types
    /** @type {?} */
    const existingApp = (/** @type {?} */ (firebase.apps.filter((/**
     * @param {?} app
     * @return {?}
     */
    app => app && app.name === config.name))[0]));
    // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any
    // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206
    return (/** @type {?} */ ((existingApp || zone.runOutsideAngular((/**
     * @return {?}
     */
    () => firebase.initializeApp(options, (/** @type {?} */ (config))))))));
}
/** @type {?} */
const FIREBASE_APP_PROVIDER = {
    provide: FirebaseApp,
    useFactory: ɵfirebaseAppFactory,
    deps: [
        FIREBASE_OPTIONS,
        NgZone,
        [new Optional(), FIREBASE_APP_NAME]
    ]
};
export class AngularFireModule {
    // tslint:disable-next-line:ban-types
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        firebase.registerVersion('angularfire', VERSION.full, platformId.toString());
        firebase.registerVersion('angular', NG_VERSION.full);
    }
    /**
     * @param {?} options
     * @param {?=} nameOrConfig
     * @return {?}
     */
    static initializeApp(options, nameOrConfig) {
        return {
            ngModule: AngularFireModule,
            providers: [
                { provide: FIREBASE_OPTIONS, useValue: options },
                { provide: FIREBASE_APP_NAME, useValue: nameOrConfig }
            ]
        };
    }
}
AngularFireModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFireModule });
AngularFireModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFireModule_Factory(t) { return new (t || AngularFireModule)(ɵngcc0.ɵɵinject(PLATFORM_ID)); }, providers: [FIREBASE_APP_PROVIDER] });
/** @nocollapse */
AngularFireModule.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFireModule, [{
        type: NgModule,
        args: [{
                providers: [FIREBASE_APP_PROVIDER]
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcmUvZmlyZWJhc2UuYXBwLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE9BQU8sSUFBSSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hJLE9BQU8sS0FBSyxRQUFRLE1BQU0sY0FBYyxDQUFDO0FBQ3pDO0FBQUk7QUFBVzs7QUFHZixxQ0FFQztBQUNEO0FBQ0c7QUFBVztBQUFkLHVDQUVDO0FBQ0Q7QUFDQSxNQUFNLE9BQU8sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQWtCLDBCQUEwQixDQUFDO0FBQy9GO0FBQUEsTUFBTSxPQUFPLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUF5QywrQkFBK0IsQ0FBQztBQUM1SDtBQUNpRztBQUVqRyxNQUFNLE9BQU8sV0FBVztBQUFHLENBYTFCO0FBQ0Q7QUFDWTtBQUFxQixJQWQvQiwyQkFBYTtBQUNmO0FBQ00sSUFESiw4QkFBWTtBQUNkO0FBQXFCLElBQW5CLGdDQUFxQztBQUN2QztBQUFxQixJQUFuQiwyQkFBc0I7QUFDeEI7QUFBcUIsSUFBbkIsK0JBQXNEO0FBQ3hEO0FBQXFCLElBQW5CLGdDQUFxQztBQUN2QztBQUFxQixJQUFuQixrQ0FBMkM7QUFDN0M7QUFBcUIsSUFBbkIsOEJBQXFEO0FBQ3ZEO0FBQXFCLElBQW5CLDZCQUE0QjtBQUM5QjtBQUFxQixJQUFuQixnQ0FBcUM7QUFDdkM7QUFBcUIsSUFBbkIsZ0NBQW9EO0FBQ3REO0FBQXFCLElBQW5CLG1DQUE4QztBQUNoRDtBQUNBO0FBQ0EsTUFBTSxPQUFPLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQztBQUFVO0FBQUksUUFBUSxDQUFDO0FBRWhEO0FBQW1CO0FBQTRCO0FBQWU7QUFBeEUs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QUEsQUFhQSxBQVpBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWRBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBYUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiwgTmdNb2R1bGUsIE5nWm9uZSwgT3B0aW9uYWwsIFBMQVRGT1JNX0lELCBWRVJTSU9OIGFzIE5HX1ZFUlNJT04sIFZlcnNpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBhbmFseXRpY3MsIGFwcCwgYXV0aCwgZGF0YWJhc2UsIGZpcmVzdG9yZSwgZnVuY3Rpb25zLCBtZXNzYWdpbmcsIHBlcmZvcm1hbmNlLCByZW1vdGVDb25maWcsIHN0b3JhZ2UgfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuXG4vLyBJTlZFU1RJR0FURSBQdWJsaWMgdHlwZXMgZG9uJ3QgZXhwb3NlIEZpcmViYXNlT3B0aW9ucyBvciBGaXJlYmFzZUFwcENvbmZpZywgaXMgdGhpcyB0aGUgY2FzZSBhbnlsb25nZXI/XG5leHBvcnQgaW50ZXJmYWNlIEZpcmViYXNlT3B0aW9ucyB7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaXJlYmFzZUFwcENvbmZpZyB7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGNvbnN0IEZJUkVCQVNFX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48RmlyZWJhc2VPcHRpb25zPignYW5ndWxhcmZpcmUyLmFwcC5vcHRpb25zJyk7XG5leHBvcnQgY29uc3QgRklSRUJBU0VfQVBQX05BTUUgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCB1bmRlZmluZWQ+KCdhbmd1bGFyZmlyZTIuYXBwLm5hbWVPckNvbmZpZycpO1xuXG4vLyBIYXZlIHRvIGltcGxlbWVudCBhcyB3ZSBuZWVkIHRvIHJldHVybiBhIGNsYXNzIGZyb20gdGhlIHByb3ZpZGVyLCB3ZSBzaG91bGQgY29uc2lkZXIgZXhwb3J0aW5nXG4vLyB0aGlzIGluIHRoZSBmaXJlYmFzZS9hcHAgdHlwZXMgYXMgdGhpcyBpcyBvdXIgaGlnaGVzdCByaXNrIG9mIGJyZWFrc1xuZXhwb3J0IGNsYXNzIEZpcmViYXNlQXBwIGltcGxlbWVudHMgUGFydGlhbDxhcHAuQXBwPiB7XG4gIG5hbWU6IHN0cmluZztcbiAgb3B0aW9uczoge307XG4gIGFuYWx5dGljczogKCkgPT4gYW5hbHl0aWNzLkFuYWx5dGljcztcbiAgYXV0aDogKCkgPT4gYXV0aC5BdXRoO1xuICBkYXRhYmFzZTogKGRhdGFiYXNlVVJMPzogc3RyaW5nKSA9PiBkYXRhYmFzZS5EYXRhYmFzZTtcbiAgbWVzc2FnaW5nOiAoKSA9PiBtZXNzYWdpbmcuTWVzc2FnaW5nO1xuICBwZXJmb3JtYW5jZTogKCkgPT4gcGVyZm9ybWFuY2UuUGVyZm9ybWFuY2U7XG4gIHN0b3JhZ2U6IChzdG9yYWdlQnVja2V0Pzogc3RyaW5nKSA9PiBzdG9yYWdlLlN0b3JhZ2U7XG4gIGRlbGV0ZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgZmlyZXN0b3JlOiAoKSA9PiBmaXJlc3RvcmUuRmlyZXN0b3JlO1xuICBmdW5jdGlvbnM6IChyZWdpb24/OiBzdHJpbmcpID0+IGZ1bmN0aW9ucy5GdW5jdGlvbnM7XG4gIHJlbW90ZUNvbmZpZzogKCkgPT4gcmVtb3RlQ29uZmlnLlJlbW90ZUNvbmZpZztcbn1cblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBuZXcgVmVyc2lvbignQU5HVUxBUkZJUkUyX1ZFUlNJT04nKTtcblxuZXhwb3J0IGZ1bmN0aW9uIMm1ZmlyZWJhc2VBcHBGYWN0b3J5KG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgem9uZTogTmdab25lLCBuYW1lT3JDb25maWc/OiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IG51bGwpIHtcbiAgY29uc3QgbmFtZSA9IHR5cGVvZiBuYW1lT3JDb25maWcgPT09ICdzdHJpbmcnICYmIG5hbWVPckNvbmZpZyB8fCAnW0RFRkFVTFRdJztcbiAgY29uc3QgY29uZmlnID0gdHlwZW9mIG5hbWVPckNvbmZpZyA9PT0gJ29iamVjdCcgJiYgbmFtZU9yQ29uZmlnIHx8IHt9O1xuICBjb25maWcubmFtZSA9IGNvbmZpZy5uYW1lIHx8IG5hbWU7XG4gIC8vIEFkZGVkIGFueSBkdWUgdG8gc29tZSBpbmNvbnNpc3RlbmN5IGJldHdlZW4gQGZpcmViYXNlL2FwcCBhbmQgZmlyZWJhc2UgdHlwZXNcbiAgY29uc3QgZXhpc3RpbmdBcHAgPSBmaXJlYmFzZS5hcHBzLmZpbHRlcihhcHAgPT4gYXBwICYmIGFwcC5uYW1lID09PSBjb25maWcubmFtZSlbMF0gYXMgYW55O1xuICAvLyBXZSBzdXBwb3J0IEZpcmViYXNlQ29uZmlnLCBpbml0aWFsaXplQXBwJ3MgcHVibGljIHR5cGUgb25seSBhY2NlcHRzIHN0cmluZzsgbmVlZCB0byBjYXN0IGFzIGFueVxuICAvLyBDb3VsZCBiZSBzb2x2ZWQgd2l0aCBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL3B1bGwvMTIwNlxuICByZXR1cm4gKGV4aXN0aW5nQXBwIHx8IHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChvcHRpb25zLCBjb25maWcgYXMgYW55KSkpIGFzIEZpcmViYXNlQXBwO1xufVxuXG5jb25zdCBGSVJFQkFTRV9BUFBfUFJPVklERVIgPSB7XG4gIHByb3ZpZGU6IEZpcmViYXNlQXBwLFxuICB1c2VGYWN0b3J5OiDJtWZpcmViYXNlQXBwRmFjdG9yeSxcbiAgZGVwczogW1xuICAgIEZJUkVCQVNFX09QVElPTlMsXG4gICAgTmdab25lLFxuICAgIFtuZXcgT3B0aW9uYWwoKSwgRklSRUJBU0VfQVBQX05BTUVdXG4gIF1cbn07XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW0ZJUkVCQVNFX0FQUF9QUk9WSURFUl1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckZpcmVNb2R1bGUge1xuICBzdGF0aWMgaW5pdGlhbGl6ZUFwcChvcHRpb25zOiBGaXJlYmFzZU9wdGlvbnMsIG5hbWVPckNvbmZpZz86IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBBbmd1bGFyRmlyZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IEZJUkVCQVNFX09QVElPTlMsIHVzZVZhbHVlOiBvcHRpb25zIH0sXG4gICAgICAgIHsgcHJvdmlkZTogRklSRUJBU0VfQVBQX05BTUUsIHVzZVZhbHVlOiBuYW1lT3JDb25maWcgfVxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IE9iamVjdCkge1xuICAgIGZpcmViYXNlLnJlZ2lzdGVyVmVyc2lvbignYW5ndWxhcmZpcmUnLCBWRVJTSU9OLmZ1bGwsIHBsYXRmb3JtSWQudG9TdHJpbmcoKSk7XG4gICAgZmlyZWJhc2UucmVnaXN0ZXJWZXJzaW9uKCdhbmd1bGFyJywgTkdfVkVSU0lPTi5mdWxsKTtcbiAgfVxufVxuIl19