import { __awaiter } from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { merge, Observable } from 'rxjs';
import { map, skip, startWith, switchMap } from 'rxjs/operators';
import { createMVCEventObservable } from '../../utils/mvcarray-utils';
import { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';
import * as ɵngcc0 from '@angular/core';
export class PolygonManager {
    constructor(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._polygons = new Map();
    }
    addPolygon(path) {
        const polygonPromise = this._mapsWrapper.createPolygon({
            clickable: path.clickable,
            draggable: path.draggable,
            editable: path.editable,
            fillColor: path.fillColor,
            fillOpacity: path.fillOpacity,
            geodesic: path.geodesic,
            paths: path.paths,
            strokeColor: path.strokeColor,
            strokeOpacity: path.strokeOpacity,
            strokeWeight: path.strokeWeight,
            visible: path.visible,
            zIndex: path.zIndex,
        });
        this._polygons.set(path, polygonPromise);
    }
    updatePolygon(polygon) {
        const m = this._polygons.get(polygon);
        if (m == null) {
            return Promise.resolve();
        }
        return m.then((l) => this._zone.run(() => { l.setPaths(polygon.paths); }));
    }
    setPolygonOptions(path, options) {
        return this._polygons.get(path).then((l) => { l.setOptions(options); });
    }
    deletePolygon(paths) {
        const m = this._polygons.get(paths);
        if (m == null) {
            return Promise.resolve();
        }
        return m.then((l) => {
            return this._zone.run(() => {
                l.setMap(null);
                this._polygons.delete(paths);
            });
        });
    }
    getPath(polygonDirective) {
        return this._polygons.get(polygonDirective)
            .then((polygon) => polygon.getPath().getArray());
    }
    getPaths(polygonDirective) {
        return this._polygons.get(polygonDirective)
            .then((polygon) => polygon.getPaths().getArray().map((p) => p.getArray()));
    }
    createEventObservable(eventName, path) {
        return new Observable((observer) => {
            this._polygons.get(path).then((l) => {
                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));
            });
        });
    }
    createPathEventObservable(agmPolygon) {
        return __awaiter(this, void 0, void 0, function* () {
            const polygon = yield this._polygons.get(agmPolygon);
            const paths = polygon.getPaths();
            const pathsChanges$ = createMVCEventObservable(paths);
            return pathsChanges$.pipe(startWith({ newArr: paths.getArray() }), // in order to subscribe to them all
            switchMap(parentMVEvent => merge(... // rest parameter
            parentMVEvent.newArr.map((chMVC, index) => createMVCEventObservable(chMVC)
                .pipe(map(chMVCEvent => ({ parentMVEvent, chMVCEvent, pathIndex: index })))))
                .pipe(// start the merged ob with an event signinifing change to parent
            startWith({ parentMVEvent, chMVCEvent: null, pathIndex: null }))), skip(1), // skip the manually added event
            map(({ parentMVEvent, chMVCEvent, pathIndex }) => {
                let retVal;
                if (!chMVCEvent) {
                    retVal = {
                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),
                        eventName: parentMVEvent.eventName,
                        index: parentMVEvent.index,
                    };
                    if (parentMVEvent.previous) {
                        retVal.previous = parentMVEvent.previous.getArray();
                    }
                }
                else {
                    retVal = {
                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),
                        pathIndex,
                        eventName: chMVCEvent.eventName,
                        index: chMVCEvent.index,
                    };
                    if (chMVCEvent.previous) {
                        retVal.previous = chMVCEvent.previous;
                    }
                }
                return retVal;
            }));
        });
    }
}
PolygonManager.ɵfac = function PolygonManager_Factory(t) { return new (t || PolygonManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
PolygonManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PolygonManager, factory: PolygonManager.ɵfac });
PolygonManager.ctorParameters = () => [
    { type: GoogleMapsAPIWrapper },
    { type: NgZone }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PolygonManager, [{
        type: Injectable
    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9seWdvbi1tYW5hZ2VyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvc2VydmljZXMvbWFuYWdlcnMvcG9seWdvbi1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHakUsT0FBTyxFQUFFLHdCQUF3QixFQUFZLE1BQU0sNEJBQTRCLENBQUM7QUFDaEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7O0FBR2xFLE1BQU0sT0FBTyxjQUFjO0FBQzNCLElBR0UsWUFBb0IsWUFBa0MsRUFBVSxLQUFhO0FBQUksUUFBN0QsaUJBQVksR0FBWixZQUFZLENBQXNCO0FBQUMsUUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFRO0FBQUMsUUFIdEUsY0FBUyxHQUNmLElBQUksR0FBRyxFQUE0QyxDQUFDO0FBQ3hELElBQ21GLENBQUM7QUFDcEYsSUFDRSxVQUFVLENBQUMsSUFBZ0I7QUFDN0IsUUFBSSxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUMzRCxZQUFNLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztBQUMvQixZQUFNLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztBQUMvQixZQUFNLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtBQUM3QixZQUFNLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztBQUMvQixZQUFNLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztBQUNuQyxZQUFNLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtBQUM3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QUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDeEcsd0JBQVksU0FBUztBQUNyQix3QkFBWSxTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7QUFDM0Msd0JBQVksS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLO0FBQ25DLHFCQUFzRixDQUFDO0FBQ3ZGLG9CQUFVLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRTtBQUNuQyx3QkFBWSxNQUFNLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUM7QUFDbEQscUJBQVc7QUFDWCxpQkFBUztBQUNULGdCQUFRLE9BQU8sTUFBTSxDQUFDO0FBQ3RCLFlBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNWLFFBQUUsQ0FBQztBQUVILEtBRkc7QUFDSDswQ0E1R0MsVUFBVTswR0FDVDtBQUFDO0FBQ1UsWUFKSixvQkFBb0I7QUFBSSxZQU5aLE1BQU07QUFBRzs7O3VHQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1lcmdlLCBPYnNlcnZhYmxlLCBPYnNlcnZlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBza2lwLCBzdGFydFdpdGgsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQWdtUG9seWdvbiB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvcG9seWdvbic7XG5pbXBvcnQgeyBjcmVhdGVNVkNFdmVudE9ic2VydmFibGUsIE1WQ0V2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvbXZjYXJyYXktdXRpbHMnO1xuaW1wb3J0IHsgR29vZ2xlTWFwc0FQSVdyYXBwZXIgfSBmcm9tICcuLi9nb29nbGUtbWFwcy1hcGktd3JhcHBlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb2x5Z29uTWFuYWdlciB7XG4gIHByaXZhdGUgX3BvbHlnb25zOiBNYXA8QWdtUG9seWdvbiwgUHJvbWlzZTxnb29nbGUubWFwcy5Qb2x5Z29uPj4gPVxuICAgIG5ldyBNYXA8QWdtUG9seWdvbiwgUHJvbWlzZTxnb29nbGUubWFwcy5Qb2x5Z29uPj4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9tYXBzV3JhcHBlcjogR29vZ2xlTWFwc0FQSVdyYXBwZXIsIHByaXZhdGUgX3pvbmU6IE5nWm9uZSkgeyB9XG5cbiAgYWRkUG9seWdvbihwYXRoOiBBZ21Qb2x5Z29uKSB7XG4gICAgY29uc3QgcG9seWdvblByb21pc2UgPSB0aGlzLl9tYXBzV3JhcHBlci5jcmVhdGVQb2x5Z29uKHtcbiAgICAgIGNsaWNrYWJsZTogcGF0aC5jbGlja2FibGUsXG4gICAgICBkcmFnZ2FibGU6IHBhdGguZHJhZ2dhYmxlLFxuICAgICAgZWRpdGFibGU6IHBhdGguZWRpdGFibGUsXG4gICAgICBmaWxsQ29sb3I6IHBhdGguZmlsbENvbG9yLFxuICAgICAgZmlsbE9wYWNpdHk6IHBhdGguZmlsbE9wYWNpdHksXG4gICAgICBnZW9kZXNpYzogcGF0aC5nZW9kZXNpYyxcbiAgICAgIHBhdGhzOiBwYXRoLnBhdGhzLFxuICAgICAgc3Ryb2tlQ29sb3I6IHBhdGguc3Ryb2tlQ29sb3IsXG4gICAgICBzdHJva2VPcGFjaXR5OiBwYXRoLnN0cm9rZU9wYWNpdHksXG4gICAgICBzdHJva2VXZWlnaHQ6IHBhdGguc3Ryb2tlV2VpZ2h0LFxuICAgICAgdmlzaWJsZTogcGF0aC52aXNpYmxlLFxuICAgICAgekluZGV4OiBwYXRoLnpJbmRleCxcbiAgICB9KTtcbiAgICB0aGlzLl9wb2x5Z29ucy5zZXQocGF0aCwgcG9seWdvblByb21pc2UpO1xuICB9XG5cbiAgdXBkYXRlUG9seWdvbihwb2x5Z29uOiBBZ21Qb2x5Z29uKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgbSA9IHRoaXMuX3BvbHlnb25zLmdldChwb2x5Z29uKTtcbiAgICBpZiAobSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJldHVybiBtLnRoZW4oKGw6IGdvb2dsZS5tYXBzLlBvbHlnb24pID0+IHRoaXMuX3pvbmUucnVuKCgpID0+IHsgbC5zZXRQYXRocyhwb2x5Z29uLnBhdGhzKTsgfSkpO1xuICB9XG5cbiAgc2V0UG9seWdvbk9wdGlvbnMocGF0aDogQWdtUG9seWdvbiwgb3B0aW9uczogeyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX3BvbHlnb25zLmdldChwYXRoKS50aGVuKChsOiBnb29nbGUubWFwcy5Qb2x5Z29uKSA9PiB7IGwuc2V0T3B0aW9ucyhvcHRpb25zKTsgfSk7XG4gIH1cblxuICBkZWxldGVQb2x5Z29uKHBhdGhzOiBBZ21Qb2x5Z29uKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgbSA9IHRoaXMuX3BvbHlnb25zLmdldChwYXRocyk7XG4gICAgaWYgKG0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gbS50aGVuKChsOiBnb29nbGUubWFwcy5Qb2x5Z29uKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5fem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICBsLnNldE1hcChudWxsKTtcbiAgICAgICAgdGhpcy5fcG9seWdvbnMuZGVsZXRlKHBhdGhzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0UGF0aChwb2x5Z29uRGlyZWN0aXZlOiBBZ21Qb2x5Z29uKTogUHJvbWlzZTxnb29nbGUubWFwcy5MYXRMbmdbXT4ge1xuICAgIHJldHVybiB0aGlzLl9wb2x5Z29ucy5nZXQocG9seWdvbkRpcmVjdGl2ZSlcbiAgICAgIC50aGVuKChwb2x5Z29uKSA9PiBwb2x5Z29uLmdldFBhdGgoKS5nZXRBcnJheSgpKTtcbiAgfVxuXG4gIGdldFBhdGhzKHBvbHlnb25EaXJlY3RpdmU6IEFnbVBvbHlnb24pOiBQcm9taXNlPGdvb2dsZS5tYXBzLkxhdExuZ1tdW10+IHtcbiAgICByZXR1cm4gdGhpcy5fcG9seWdvbnMuZ2V0KHBvbHlnb25EaXJlY3RpdmUpXG4gICAgICAudGhlbigocG9seWdvbikgPT4gcG9seWdvbi5nZXRQYXRocygpLmdldEFycmF5KCkubWFwKChwKSA9PiBwLmdldEFycmF5KCkpKTtcbiAgfVxuXG4gIGNyZWF0ZUV2ZW50T2JzZXJ2YWJsZTxUPihldmVudE5hbWU6IHN0cmluZywgcGF0aDogQWdtUG9seWdvbik6IE9ic2VydmFibGU8VD4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSA9PiB7XG4gICAgICB0aGlzLl9wb2x5Z29ucy5nZXQocGF0aCkudGhlbigobDogZ29vZ2xlLm1hcHMuUG9seWdvbikgPT4ge1xuICAgICAgICBsLmFkZExpc3RlbmVyKGV2ZW50TmFtZSwgKGU6IFQpID0+IHRoaXMuX3pvbmUucnVuKCgpID0+IG9ic2VydmVyLm5leHQoZSkpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlUGF0aEV2ZW50T2JzZXJ2YWJsZShhZ21Qb2x5Z29uOiBBZ21Qb2x5Z29uKTpcbiAgICAgICAgUHJvbWlzZTxPYnNlcnZhYmxlPE1WQ0V2ZW50PGdvb2dsZS5tYXBzLkxhdExuZ1tdIHwgZ29vZ2xlLm1hcHMuTGF0TG5nTGl0ZXJhbFtdPj4+IHtcbiAgICBjb25zdCBwb2x5Z29uID0gYXdhaXQgdGhpcy5fcG9seWdvbnMuZ2V0KGFnbVBvbHlnb24pO1xuICAgIGNvbnN0IHBhdGhzID0gcG9seWdvbi5nZXRQYXRocygpO1xuICAgIGNvbnN0IHBhdGhzQ2hhbmdlcyQgPSBjcmVhdGVNVkNFdmVudE9ic2VydmFibGUocGF0aHMpO1xuICAgIHJldHVybiBwYXRoc0NoYW5nZXMkLnBpcGUoXG4gICAgICBzdGFydFdpdGgoKHsgbmV3QXJyOiBwYXRocy5nZXRBcnJheSgpIH0gYXMgTVZDRXZlbnQ8Z29vZ2xlLm1hcHMuTVZDQXJyYXk8Z29vZ2xlLm1hcHMuTGF0TG5nPj4pKSwgLy8gaW4gb3JkZXIgdG8gc3Vic2NyaWJlIHRvIHRoZW0gYWxsXG4gICAgICBzd2l0Y2hNYXAocGFyZW50TVZFdmVudCA9PiBtZXJnZSguLi4vLyByZXN0IHBhcmFtZXRlclxuICAgICAgICBwYXJlbnRNVkV2ZW50Lm5ld0Fyci5tYXAoKGNoTVZDLCBpbmRleCkgPT5cbiAgICAgICAgICBjcmVhdGVNVkNFdmVudE9ic2VydmFibGUoY2hNVkMpXG4gICAgICAgICAgLnBpcGUobWFwKGNoTVZDRXZlbnQgPT4gKHsgcGFyZW50TVZFdmVudCwgY2hNVkNFdmVudCwgcGF0aEluZGV4OiBpbmRleCB9KSkpKSlcbiAgICAgICAgLnBpcGUoIC8vIHN0YXJ0IHRoZSBtZXJnZWQgb2Igd2l0aCBhbiBldmVudCBzaWduaW5pZmluZyBjaGFuZ2UgdG8gcGFyZW50XG4gICAgICAgICAgc3RhcnRXaXRoKHsgcGFyZW50TVZFdmVudCwgY2hNVkNFdmVudDogbnVsbCwgcGF0aEluZGV4OiBudWxsIH0pKVxuICAgICAgKSxcbiAgICAgIHNraXAoMSksIC8vIHNraXAgdGhlIG1hbnVhbGx5IGFkZGVkIGV2ZW50XG4gICAgICBtYXAoKHsgcGFyZW50TVZFdmVudCwgY2hNVkNFdmVudCwgcGF0aEluZGV4IH0pID0+IHtcbiAgICAgICAgbGV0IHJldFZhbDtcbiAgICAgICAgaWYgKCFjaE1WQ0V2ZW50KSB7XG4gICAgICAgICAgcmV0VmFsID0ge1xuICAgICAgICAgICAgbmV3QXJyOiBwYXJlbnRNVkV2ZW50Lm5ld0Fyci5tYXAoc3ViQXJyID0+IHN1YkFyci5nZXRBcnJheSgpLm1hcChsYXRMbmcgPT4gbGF0TG5nLnRvSlNPTigpKSksXG4gICAgICAgICAgICBldmVudE5hbWU6IHBhcmVudE1WRXZlbnQuZXZlbnROYW1lLFxuICAgICAgICAgICAgaW5kZXg6IHBhcmVudE1WRXZlbnQuaW5kZXgsXG4gICAgICAgICAgfSBhcyBNVkNFdmVudDxnb29nbGUubWFwcy5MYXRMbmdbXSB8IGdvb2dsZS5tYXBzLkxhdExuZ0xpdGVyYWxbXT47XG4gICAgICAgICAgaWYgKHBhcmVudE1WRXZlbnQucHJldmlvdXMpIHtcbiAgICAgICAgICAgIHJldFZhbC5wcmV2aW91cyA9ICBwYXJlbnRNVkV2ZW50LnByZXZpb3VzLmdldEFycmF5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldFZhbCA9IHtcbiAgICAgICAgICAgIG5ld0FycjogcGFyZW50TVZFdmVudC5uZXdBcnIubWFwKHN1YkFyciA9PiBzdWJBcnIuZ2V0QXJyYXkoKS5tYXAobGF0TG5nID0+IGxhdExuZy50b0pTT04oKSkpLFxuICAgICAgICAgICAgcGF0aEluZGV4LFxuICAgICAgICAgICAgZXZlbnROYW1lOiBjaE1WQ0V2ZW50LmV2ZW50TmFtZSxcbiAgICAgICAgICAgIGluZGV4OiBjaE1WQ0V2ZW50LmluZGV4LFxuICAgICAgICAgIH0gYXMgdW5rbm93biBhcyBNVkNFdmVudDxnb29nbGUubWFwcy5MYXRMbmdbXSB8IGdvb2dsZS5tYXBzLkxhdExuZ0xpdGVyYWxbXT47XG4gICAgICAgICAgaWYgKGNoTVZDRXZlbnQucHJldmlvdXMpIHtcbiAgICAgICAgICAgIHJldFZhbC5wcmV2aW91cyA9IGNoTVZDRXZlbnQucHJldmlvdXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRWYWw7XG4gICAgICB9KSk7XG4gIH1cbn1cbiJdfQ==